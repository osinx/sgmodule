// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "request.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Request
 */
export interface Request {
    /**
     * @generated from protobuf field: Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: string browseId = 2;
     */
    browseId: string;
}
/**
 * @generated from protobuf message Context
 */
export interface Context {
    /**
     * @generated from protobuf field: AdSignalsInfo adSignalsInfo = 9;
     */
    adSignalsInfo?: AdSignalsInfo;
}
/**
 * @generated from protobuf message AdSignalsInfo
 */
export interface AdSignalsInfo {
    /**
     * @generated from protobuf field: repeated Params params = 1;
     */
    params: Params[];
}
/**
 * @generated from protobuf message Params
 */
export interface Params {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message RequestDownloadAction
 */
export interface RequestDownloadAction {
    /**
     * @generated from protobuf field: string videoId = 8;
     */
    videoId: string;
}
/**
 * @generated from protobuf message RequestPlayer
 */
export interface RequestPlayer {
    /**
     * @generated from protobuf field: Context context = 1;
     */
    context?: Context;
    /**
     * @generated from protobuf field: string videoId = 2;
     */
    videoId: string;
    /**
     * @generated from protobuf field: p1F4 p1F4 = 4;
     */
    p1F4?: p1F4;
    /**
     * @generated from protobuf field: uint32 p1F8 = 8;
     */
    p1F8: number;
}
/**
 * @generated from protobuf message p1F4
 */
export interface p1F4 {
    /**
     * @generated from protobuf field: p4F1 p4F1 = 1;
     */
    p4F1?: p4F1;
}
/**
 * @generated from protobuf message p4F1
 */
export interface p4F1 {
    /**
     * @generated from protobuf field: uint32 f5 = 5;
     */
    f5: number;
    /**
     * @generated from protobuf field: uint32 f7 = 7;
     */
    f7: number;
    /**
     * @generated from protobuf field: uint32 f8 = 8;
     */
    f8: number;
    /**
     * @generated from protobuf field: uint32 f11 = 11;
     */
    f11: number;
    /**
     * @generated from protobuf field: string f12 = 12;
     */
    f12: string;
    /**
     * @generated from protobuf field: uint32 f29 = 29;
     */
    f29: number;
    /**
     * @generated from protobuf field: uint32 f44 = 44;
     */
    f44: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("Request", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "browseId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { browseId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* string browseId */ 2:
                    message.browseId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string browseId = 2; */
        if (message.browseId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.browseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Context$Type extends MessageType<Context> {
    constructor() {
        super("Context", [
            { no: 9, name: "adSignalsInfo", kind: "message", T: () => AdSignalsInfo }
        ]);
    }
    create(value?: PartialMessage<Context>): Context {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Context>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Context): Context {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AdSignalsInfo adSignalsInfo */ 9:
                    message.adSignalsInfo = AdSignalsInfo.internalBinaryRead(reader, reader.uint32(), options, message.adSignalsInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Context, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AdSignalsInfo adSignalsInfo = 9; */
        if (message.adSignalsInfo)
            AdSignalsInfo.internalBinaryWrite(message.adSignalsInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Context
 */
export const Context = new Context$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdSignalsInfo$Type extends MessageType<AdSignalsInfo> {
    constructor() {
        super("AdSignalsInfo", [
            { no: 1, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Params }
        ]);
    }
    create(value?: PartialMessage<AdSignalsInfo>): AdSignalsInfo {
        const message = { params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdSignalsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdSignalsInfo): AdSignalsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Params params */ 1:
                    message.params.push(Params.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdSignalsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Params params = 1; */
        for (let i = 0; i < message.params.length; i++)
            Params.internalBinaryWrite(message.params[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AdSignalsInfo
 */
export const AdSignalsInfo = new AdSignalsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
    constructor() {
        super("Params", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Params>): Params {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestDownloadAction$Type extends MessageType<RequestDownloadAction> {
    constructor() {
        super("RequestDownloadAction", [
            { no: 8, name: "videoId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestDownloadAction>): RequestDownloadAction {
        const message = { videoId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestDownloadAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestDownloadAction): RequestDownloadAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string videoId */ 8:
                    message.videoId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestDownloadAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string videoId = 8; */
        if (message.videoId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.videoId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestDownloadAction
 */
export const RequestDownloadAction = new RequestDownloadAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestPlayer$Type extends MessageType<RequestPlayer> {
    constructor() {
        super("RequestPlayer", [
            { no: 1, name: "context", kind: "message", T: () => Context },
            { no: 2, name: "videoId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "p1F4", kind: "message", T: () => p1F4 },
            { no: 8, name: "p1F8", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestPlayer>): RequestPlayer {
        const message = { videoId: "", p1F8: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestPlayer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestPlayer): RequestPlayer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Context context */ 1:
                    message.context = Context.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* string videoId */ 2:
                    message.videoId = reader.string();
                    break;
                case /* p1F4 p1F4 */ 4:
                    message.p1F4 = p1F4.internalBinaryRead(reader, reader.uint32(), options, message.p1F4);
                    break;
                case /* uint32 p1F8 */ 8:
                    message.p1F8 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestPlayer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Context context = 1; */
        if (message.context)
            Context.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string videoId = 2; */
        if (message.videoId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.videoId);
        /* p1F4 p1F4 = 4; */
        if (message.p1F4)
            p1F4.internalBinaryWrite(message.p1F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint32 p1F8 = 8; */
        if (message.p1F8 !== 0)
            writer.tag(8, WireType.Varint).uint32(message.p1F8);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestPlayer
 */
export const RequestPlayer = new RequestPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p1F4$Type extends MessageType<p1F4> {
    constructor() {
        super("p1F4", [
            { no: 1, name: "p4F1", kind: "message", T: () => p4F1 }
        ]);
    }
    create(value?: PartialMessage<p1F4>): p1F4 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p1F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p1F4): p1F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* p4F1 p4F1 */ 1:
                    message.p4F1 = p4F1.internalBinaryRead(reader, reader.uint32(), options, message.p4F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p1F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* p4F1 p4F1 = 1; */
        if (message.p4F1)
            p4F1.internalBinaryWrite(message.p4F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p1F4
 */
export const p1F4 = new p1F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p4F1$Type extends MessageType<p4F1> {
    constructor() {
        super("p4F1", [
            { no: 5, name: "f5", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "f7", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "f8", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "f11", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "f12", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 29, name: "f29", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 44, name: "f44", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<p4F1>): p4F1 {
        const message = { f5: 0, f7: 0, f8: 0, f11: 0, f12: "", f29: 0, f44: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p4F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p4F1): p4F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 f5 */ 5:
                    message.f5 = reader.uint32();
                    break;
                case /* uint32 f7 */ 7:
                    message.f7 = reader.uint32();
                    break;
                case /* uint32 f8 */ 8:
                    message.f8 = reader.uint32();
                    break;
                case /* uint32 f11 */ 11:
                    message.f11 = reader.uint32();
                    break;
                case /* string f12 */ 12:
                    message.f12 = reader.string();
                    break;
                case /* uint32 f29 */ 29:
                    message.f29 = reader.uint32();
                    break;
                case /* uint32 f44 */ 44:
                    message.f44 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p4F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 f5 = 5; */
        if (message.f5 !== 0)
            writer.tag(5, WireType.Varint).uint32(message.f5);
        /* uint32 f7 = 7; */
        if (message.f7 !== 0)
            writer.tag(7, WireType.Varint).uint32(message.f7);
        /* uint32 f8 = 8; */
        if (message.f8 !== 0)
            writer.tag(8, WireType.Varint).uint32(message.f8);
        /* uint32 f11 = 11; */
        if (message.f11 !== 0)
            writer.tag(11, WireType.Varint).uint32(message.f11);
        /* string f12 = 12; */
        if (message.f12 !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.f12);
        /* uint32 f29 = 29; */
        if (message.f29 !== 0)
            writer.tag(29, WireType.Varint).uint32(message.f29);
        /* uint32 f44 = 44; */
        if (message.f44 !== 0)
            writer.tag(44, WireType.Varint).uint32(message.f44);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p4F1
 */
export const p4F1 = new p4F1$Type();
