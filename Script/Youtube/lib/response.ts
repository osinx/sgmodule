// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "response.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Browse
 */
export interface Browse {
    /**
     * @generated from protobuf field: ResponseContext responseContext = 1;
     */
    responseContext?: ResponseContext;
    /**
     * @generated from protobuf field: n1F9 n1F9 = 9;
     */
    n1F9?: n1F9;
    /**
     * @generated from protobuf field: n1F10 n1F10 = 10;
     */
    n1F10?: n1F10;
}
/**
 * @generated from protobuf message ResponseContext
 */
export interface ResponseContext {
    /**
     * @generated from protobuf field: repeated ServiceTrackingParams serviceTrackingParams = 6;
     */
    serviceTrackingParams: ServiceTrackingParams[];
}
/**
 * @generated from protobuf message ServiceTrackingParams
 */
export interface ServiceTrackingParams {
    /**
     * @generated from protobuf field: int32 service = 1;
     */
    service: number;
    /**
     * @generated from protobuf field: repeated Params params = 2;
     */
    params: Params[];
}
/**
 * @generated from protobuf message Params
 */
export interface Params {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message n1F9
 */
export interface n1F9 {
    /**
     * @generated from protobuf field: m2F58173949 m2F58173949 = 58173949;
     */
    m2F58173949?: m2F58173949;
    /**
     * @generated from protobuf field: n6F153515154 n6F153515154 = 153515154;
     */
    n6F153515154?: n6F153515154;
    /**
     * @generated from protobuf field: n2F49399797 n2F49399797 = 49399797;
     */
    n2F49399797?: n2F49399797;
}
/**
 * @generated from protobuf message n1F10
 */
export interface n1F10 {
    /**
     * @generated from protobuf field: n2F49399797 n2F49399797 = 49399797;
     */
    n2F49399797?: n2F49399797;
}
/**
 * @generated from protobuf message m2F58173949
 */
export interface m2F58173949 {
    /**
     * @generated from protobuf field: repeated m3F1 m3F1 = 1;
     */
    m3F1: m3F1[];
}
/**
 * @generated from protobuf message m3F1
 */
export interface m3F1 {
    /**
     * @generated from protobuf field: m4F58174010 m4F58174010 = 58174010;
     */
    m4F58174010?: m4F58174010;
}
/**
 * @generated from protobuf message m4F58174010
 */
export interface m4F58174010 {
    /**
     * @generated from protobuf field: n1F10 n1F10 = 4;
     */
    n1F10?: n1F10;
}
/**
 * @generated from protobuf message n2F49399797
 */
export interface n2F49399797 {
    /**
     * @generated from protobuf field: repeated n3F1 n3F1 = 1;
     */
    n3F1: n3F1[];
}
/**
 * @generated from protobuf message n3F1
 */
export interface n3F1 {
    /**
     * @generated from protobuf field: n4F50195462 n4F50195462 = 50195462;
     */
    n4F50195462?: n4F50195462;
    /**
     * @generated from protobuf field: n4F51845067 n4F51845067 = 51845067;
     */
    n4F51845067?: n4F51845067;
    /**
     * @generated from protobuf field: n4F221496734 m4F221496734 = 221496734;
     */
    m4F221496734?: n4F221496734;
}
/**
 * @generated from protobuf message n4F50195462
 */
export interface n4F50195462 {
    /**
     * @generated from protobuf field: repeated n5F1 n5F1 = 1;
     */
    n5F1: n5F1[];
}
/**
 * @generated from protobuf message n4F51845067
 */
export interface n4F51845067 {
    /**
     * @generated from protobuf field: n5F5 n5F5 = 5;
     */
    n5F5?: n5F5;
}
/**
 * @generated from protobuf message n4F221496734
 */
export interface n4F221496734 {
    /**
     * @generated from protobuf field: n5F3 n5F3 = 3;
     */
    n5F3?: n5F3;
    /**
     * @generated from protobuf field: n5F10 n5F10 = 10;
     */
    n5F10?: n5F10;
}
/**
 * @generated from protobuf message n5F1
 */
export interface n5F1 {
    /**
     * @generated from protobuf field: n6F153515154 n6F153515154 = 153515154;
     */
    n6F153515154?: n6F153515154;
}
/**
 * @generated from protobuf message n5F3
 */
export interface n5F3 {
    /**
     * @generated from protobuf field: n6F1 n6F1 = 1;
     */
    n6F1?: n6F1;
}
/**
 * @generated from protobuf message n5F5
 */
export interface n5F5 {
    /**
     * @generated from protobuf field: n6F51431404 n6F51431404 = 51431404;
     */
    n6F51431404?: n6F51431404;
}
/**
 * @generated from protobuf message n6F1
 */
export interface n6F1 {
    /**
     * @generated from protobuf field: string staticLyric = 1;
     */
    staticLyric: string;
}
/**
 * @generated from protobuf message n6F153515154
 */
export interface n6F153515154 {
    /**
     * @generated from protobuf field: n7F172660663 n7F172660663 = 172660663;
     */
    n7F172660663?: n7F172660663;
}
/**
 * @generated from protobuf message n6F51431404
 */
export interface n6F51431404 {
    /**
     * @generated from protobuf field: repeated n5F1 n5F1 = 1;
     */
    n5F1: n5F1[];
}
/**
 * @generated from protobuf message n7F172660663
 */
export interface n7F172660663 {
    /**
     * @generated from protobuf field: n8F1 n8F1 = 1;
     */
    n8F1?: n8F1;
    /**
     * @generated from protobuf field: n8F2 n8F2 = 2;
     */
    n8F2?: n8F2;
    /**
     * @generated from protobuf field: n8F3 n8F3 = 3;
     */
    n8F3?: n8F3;
}
/**
 * @generated from protobuf message n5F10
 */
export interface n5F10 {
    /**
     * @generated from protobuf field: Origin origin = 1;
     */
    origin?: Origin;
}
/**
 * @generated from protobuf message n8F1
 */
export interface n8F1 {
    /**
     * @generated from protobuf field: n9F168777401 n9F168777401 = 168777401;
     */
    n9F168777401?: n9F168777401;
}
/**
 * @generated from protobuf message n8F2
 */
export interface n8F2 {
    /**
     * @generated from protobuf field: n9F183314536 n9F183314536 = 183314536;
     */
    n9F183314536?: n9F183314536;
}
/**
 * @generated from protobuf message n8F3
 */
export interface n8F3 {
    /**
     * @generated from protobuf field: n8F1 n8F1 = 1;
     */
    n8F1?: n8F1;
    /**
     * @generated from protobuf field: n8F2 n8F2 = 2;
     */
    n8F2?: n8F2;
}
/**
 * @generated from protobuf message Origin
 */
export interface Origin {
    /**
     * @generated from protobuf field: string originText = 1;
     */
    originText: string;
}
/**
 * @generated from protobuf message n9F168777401
 */
export interface n9F168777401 {
    /**
     * @generated from protobuf field: n10F3 n10F3 = 3;
     */
    n10F3?: n10F3;
    /**
     * @generated from protobuf field: n10F5 n10F5 = 5;
     */
    n10F5?: n10F5;
}
/**
 * @generated from protobuf message n9F183314536
 */
export interface n9F183314536 {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
}
/**
 * @generated from protobuf message n10F3
 */
export interface n10F3 {
    /**
     * @generated from protobuf field: n11F172035250 n11F172035250 = 172035250;
     */
    n11F172035250?: n11F172035250;
}
/**
 * @generated from protobuf message n10F5
 */
export interface n10F5 {
    /**
     * @generated from protobuf field: n11F465160965 n11F465160965 = 465160965;
     */
    n11F465160965?: n11F465160965;
}
/**
 * @generated from protobuf message n11F465160965
 */
export interface n11F465160965 {
    /**
     * @generated from protobuf field: n12F4 n12F4 = 4;
     */
    n12F4?: n12F4;
}
/**
 * @generated from protobuf message n12F4
 */
export interface n12F4 {
    /**
     * @generated from protobuf field: repeated n13F1 n13F1 = 1;
     */
    n13F1: n13F1[];
    /**
     * @generated from protobuf field: string originText = 2;
     */
    originText: string;
}
/**
 * @generated from protobuf message n13F1
 */
export interface n13F1 {
    /**
     * @generated from protobuf field: string f1 = 1;
     */
    f1: string;
}
/**
 * @generated from protobuf message n11F172035250
 */
export interface n11F172035250 {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
}
/**
 * @generated from protobuf message Next
 */
export interface Next {
    /**
     * @generated from protobuf field: a1F7 a1F7 = 7;
     */
    a1F7?: a1F7;
    /**
     * @generated from protobuf field: a1F8 a1F8 = 8;
     */
    a1F8?: a1F8;
}
/**
 * @generated from protobuf message a1F7
 */
export interface a1F7 {
    /**
     * @generated from protobuf field: a2F51779735 a2F51779735 = 51779735;
     */
    a2F51779735?: a2F51779735;
    /**
     * @generated from protobuf field: MusicPlayRender musicPlayRender = 125354411;
     */
    musicPlayRender?: MusicPlayRender;
}
/**
 * @generated from protobuf message a1F8
 */
export interface a1F8 {
    /**
     * @generated from protobuf field: n2F49399797 n2F49399797 = 49399797;
     */
    n2F49399797?: n2F49399797;
}
/**
 * @generated from protobuf message MusicPlayRender
 */
export interface MusicPlayRender {
    /**
     * @generated from protobuf field: BottomRender bottomRender = 7;
     */
    bottomRender?: BottomRender;
}
/**
 * @generated from protobuf message BottomRender
 */
export interface BottomRender {
    /**
     * @generated from protobuf field: SectionTab sectionTab = 91700600;
     */
    sectionTab?: SectionTab;
}
/**
 * @generated from protobuf message SectionTab
 */
export interface SectionTab {
    /**
     * @generated from protobuf field: repeated Item items = 1;
     */
    items: Item[];
}
/**
 * @generated from protobuf message Item
 */
export interface Item {
    /**
     * @generated from protobuf field: Tab tab = 58174010;
     */
    tab?: Tab;
}
/**
 * @generated from protobuf message Tab
 */
export interface Tab {
    /**
     * @generated from protobuf field: Info info = 1;
     */
    info?: Info;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message Info
 */
export interface Info {
    /**
     * @generated from protobuf field: BrowseInfo BrowseInfo = 48687626 [json_name = "BrowseInfo"];
     */
    browseInfo?: BrowseInfo;
}
/**
 * @generated from protobuf message BrowseInfo
 */
export interface BrowseInfo {
    /**
     * @generated from protobuf field: string browseId = 2;
     */
    browseId: string;
}
/**
 * @generated from protobuf message a2F51779735
 */
export interface a2F51779735 {
    /**
     * @generated from protobuf field: a3F1 a3F1 = 1;
     */
    a3F1?: a3F1;
}
/**
 * @generated from protobuf message a3F1
 */
export interface a3F1 {
    /**
     * @generated from protobuf field: n2F49399797 n2F49399797 = 49399797;
     */
    n2F49399797?: n2F49399797;
}
/**
 * @generated from protobuf message Search
 */
export interface Search {
    /**
     * @generated from protobuf field: s1F4 s1F4 = 4;
     */
    s1F4?: s1F4;
    /**
     * @generated from protobuf field: s1F7 s1F7 = 7;
     */
    s1F7?: s1F7;
}
/**
 * @generated from protobuf message s1F4
 */
export interface s1F4 {
    /**
     * @generated from protobuf field: n2F49399797 n2F49399797 = 49399797;
     */
    n2F49399797?: n2F49399797;
}
/**
 * @generated from protobuf message s1F7
 */
export interface s1F7 {
    /**
     * @generated from protobuf field: n4F50195462 n4F50195462 = 50195462;
     */
    n4F50195462?: n4F50195462;
    /**
     * @generated from protobuf field: n2F49399797 n2F49399797 = 49399797;
     */
    n2F49399797?: n2F49399797;
}
/**
 * @generated from protobuf message Shorts
 */
export interface Shorts {
    /**
     * @generated from protobuf field: repeated t1F2 t1F2 = 2;
     */
    t1F2: t1F2[];
}
/**
 * @generated from protobuf message t1F2
 */
export interface t1F2 {
    /**
     * @generated from protobuf field: n2F1 n2F1 = 1;
     */
    n2F1?: n2F1;
}
/**
 * @generated from protobuf message n2F1
 */
export interface n2F1 {
    /**
     * @generated from protobuf field: n3F139608561 n3F139608561 = 139608561;
     */
    n3F139608561?: n3F139608561;
}
/**
 * @generated from protobuf message n3F139608561
 */
export interface n3F139608561 {
    /**
     * @generated from protobuf field: n4F8 n4F8 = 8;
     */
    n4F8?: n4F8;
}
/**
 * @generated from protobuf message n4F8
 */
export interface n4F8 {
    /**
     * @generated from protobuf field: n4F139970731 n4F139970731 = 139970731;
     */
    n4F139970731?: n4F139970731;
}
/**
 * @generated from protobuf message n4F139970731
 */
export interface n4F139970731 {
    /**
     * @generated from protobuf field: int32 f1 = 12;
     */
    f1: number;
}
/**
 * @generated from protobuf message Guide
 */
export interface Guide {
    /**
     * @generated from protobuf field: repeated g1F4 g1F4 = 4;
     */
    g1F4: g1F4[];
    /**
     * @generated from protobuf field: repeated g1F6 g1F6 = 6;
     */
    g1F6: g1F6[];
}
/**
 * @generated from protobuf message g1F4
 */
export interface g1F4 {
    /**
     * @generated from protobuf field: g2F117866661 g2F117866661 = 117866661;
     */
    g2F117866661?: g2F117866661;
}
/**
 * @generated from protobuf message g1F6
 */
export interface g1F6 {
    /**
     * @generated from protobuf field: g2F117866661 g2F117866661 = 117866661;
     */
    g2F117866661?: g2F117866661;
}
/**
 * @generated from protobuf message g2F117866661
 */
export interface g2F117866661 {
    /**
     * @generated from protobuf field: repeated g3F1 g3F1 = 1;
     */
    g3F1: g3F1[];
}
/**
 * @generated from protobuf message g3F1
 */
export interface g3F1 {
    /**
     * @generated from protobuf field: guideEntryRenderer iconRender = 318370163;
     */
    iconRender?: guideEntryRenderer;
    /**
     * @generated from protobuf field: guideEntryRenderer labelRender = 117501096;
     */
    labelRender?: guideEntryRenderer;
}
/**
 * @generated from protobuf message guideEntryRenderer
 */
export interface guideEntryRenderer {
    /**
     * @generated from protobuf field: string browseId = 1;
     */
    browseId: string;
}
/**
 * @generated from protobuf message Name
 */
export interface Name {
    /**
     * @generated from protobuf field: repeated Name.Runs runs = 1;
     */
    runs: Name_Runs[];
}
/**
 * @generated from protobuf message Name.Runs
 */
export interface Name_Runs {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message Player
 */
export interface Player {
    /**
     * @generated from protobuf field: repeated p1F7 p1F7 = 7;
     */
    p1F7: p1F7[];
    /**
     * @generated from protobuf field: p1F2 p1F2 = 2;
     */
    p1F2?: p1F2;
    /**
     * @generated from protobuf field: p1F4 p1F4 = 4;
     */
    p1F4?: p1F4;
    /**
     * @generated from protobuf field: Player.Captions captions = 10;
     */
    captions?: Player_Captions;
    /**
     * @generated from protobuf field: p1F14 p1F14 = 14;
     */
    p1F14?: p1F14;
}
/**
 * @generated from protobuf message Player.Captions
 */
export interface Player_Captions {
    /**
     * @generated from protobuf field: Player.Captions.PlayerCaptionsTracklistRenderer playerCaptionsTracklistRenderer = 51621377;
     */
    playerCaptionsTracklistRenderer?: Player_Captions_PlayerCaptionsTracklistRenderer;
}
/**
 * @generated from protobuf message Player.Captions.PlayerCaptionsTracklistRenderer
 */
export interface Player_Captions_PlayerCaptionsTracklistRenderer {
    /**
     * @generated from protobuf field: repeated Player.Captions.PlayerCaptionsTracklistRenderer.CaptionTracks captionTracks = 1;
     */
    captionTracks: Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks[];
    /**
     * @generated from protobuf field: repeated Player.Captions.PlayerCaptionsTracklistRenderer.AudioTracks audioTracks = 2;
     */
    audioTracks: Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks[];
    /**
     * @generated from protobuf field: repeated Player.Captions.PlayerCaptionsTracklistRenderer.TranslationLanguages translationLanguages = 3;
     */
    translationLanguages: Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages[];
    /**
     * @generated from protobuf field: optional int32 defaultAudioTrackIndex = 4;
     */
    defaultAudioTrackIndex?: number;
    /**
     * @generated from protobuf field: optional int32 defaultCaptionTrackIndex = 6;
     */
    defaultCaptionTrackIndex?: number;
}
/**
 * @generated from protobuf message Player.Captions.PlayerCaptionsTracklistRenderer.CaptionTracks
 */
export interface Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks {
    /**
     * @generated from protobuf field: string baseUrl = 1;
     */
    baseUrl: string;
    /**
     * @generated from protobuf field: Name name = 2;
     */
    name?: Name;
    /**
     * @generated from protobuf field: string vssId = 3;
     */
    vssId: string;
    /**
     * @generated from protobuf field: string languageCode = 4;
     */
    languageCode: string;
    /**
     * @generated from protobuf field: optional string kind = 5;
     */
    kind?: string;
    /**
     * @generated from protobuf field: optional bool rtl = 6;
     */
    rtl?: boolean;
    /**
     * @generated from protobuf field: bool isTranslatable = 7;
     */
    isTranslatable: boolean;
}
/**
 * @generated from protobuf message Player.Captions.PlayerCaptionsTracklistRenderer.AudioTracks
 */
export interface Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks {
    /**
     * @generated from protobuf field: repeated int32 captionTrackIndices = 2 [packed = false];
     */
    captionTrackIndices: number[];
    /**
     * @generated from protobuf field: optional int32 defaultCaptionTrackIndex = 3;
     */
    defaultCaptionTrackIndex?: number;
    /**
     * @generated from protobuf field: optional int32 forcedCaptionTrackIndex = 4;
     */
    forcedCaptionTrackIndex?: number;
    /**
     * @generated from protobuf field: optional int32 visibility = 5;
     */
    visibility?: number;
    /**
     * @generated from protobuf field: optional bool hasDefaultTrack = 6;
     */
    hasDefaultTrack?: boolean;
    /**
     * @generated from protobuf field: optional bool hasForcedTrack = 7;
     */
    hasForcedTrack?: boolean;
    /**
     * @generated from protobuf field: optional string audioTrackId = 8;
     */
    audioTrackId?: string;
    /**
     * @generated from protobuf field: optional int32 captionsInitialState = 11;
     */
    captionsInitialState?: number;
}
/**
 * @generated from protobuf message Player.Captions.PlayerCaptionsTracklistRenderer.TranslationLanguages
 */
export interface Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages {
    /**
     * @generated from protobuf field: string languageCode = 1;
     */
    languageCode: string;
    /**
     * @generated from protobuf field: Name languageName = 2;
     */
    languageName?: Name; // ??? ??? = 3 [json_name = "???"];
}
/**
 * @generated from protobuf message p1F2
 */
export interface p1F2 {
    /**
     * @generated from protobuf field: int32 p2F1 = 1;
     */
    p2F1: number; // premium: 0
    /**
     * @generated from protobuf field: string p2F2 = 2;
     */
    p2F2: string;
    /**
     * @generated from protobuf field: p2F10 p2F10 = 10;
     */
    p2F10?: p2F10;
    /**
     * @generated from protobuf field: p2F21 p2F21 = 21;
     */
    p2F21?: p2F21;
    /**
     * @generated from protobuf field: p2F11 p2F11 = 11;
     */
    p2F11?: p2F11;
}
/**
 * @generated from protobuf message p1F4
 */
export interface p1F4 {
    /**
     * @generated from protobuf field: repeated p4F3 p4F3 = 3;
     */
    p4F3: p4F3[];
}
/**
 * @generated from protobuf message p4F3
 */
export interface p4F3 {
    /**
     * @generated from protobuf field: string stream = 2;
     */
    stream: string;
    /**
     * @generated from protobuf field: string codecs = 5;
     */
    codecs: string;
    /**
     * @generated from protobuf field: uint32 w = 7;
     */
    w: number;
    /**
     * @generated from protobuf field: uint32 h = 8;
     */
    h: number;
}
/**
 * @generated from protobuf message p1F7
 */
export interface p1F7 {
    /**
     * @generated from protobuf field: p2F84813246 p2F84813246 = 84813246;
     */
    p2F84813246?: p2F84813246;
}
/**
 * @generated from protobuf message p1F14
 */
export interface p1F14 {
    /**
     * @generated from protobuf field: string f1 = 1;
     */
    f1: string;
    /**
     * @generated from protobuf field: uint32 f2 = 2;
     */
    f2: number;
    /**
     * @generated from protobuf field: uint32 f3 = 3;
     */
    f3: number;
    /**
     * @generated from protobuf field: uint32 f5 = 5;
     */
    f5: number;
}
/**
 * @generated from protobuf message p2F84813246
 */
export interface p2F84813246 {
    /**
     * @generated from protobuf field: int32 v = 3;
     */
    v: number;
}
/**
 * @generated from protobuf message p2F21
 */
export interface p2F21 {
    /**
     * @generated from protobuf field: p3F151635310 p3F151635310 = 151635310;
     */
    p3F151635310?: p3F151635310;
}
/**
 * @generated from protobuf message p2F10
 */
export interface p2F10 {
    /**
     * @generated from protobuf field: n60572968 pn60572968 = 60572968;
     */
    pn60572968?: n60572968;
}
/**
 * @generated from protobuf message pn60572968
 */
export interface pn60572968 {
    /**
     * @generated from protobuf field: int32 f1 = 1;
     */
    f1: number;
    /**
     * @generated from protobuf field: repeated videoInfo videoInfo = 3;
     */
    videoInfo: videoInfo[]; // da2F2 f4 = 4;
}
/**
 * @generated from protobuf message videoInfo
 */
export interface videoInfo {
    /**
     * @generated from protobuf field: int32 f3 = 3;
     */
    f3: number;
    /**
     * @generated from protobuf field: int32 f4 = 4;
     */
    f4: number;
    /**
     * @generated from protobuf field: int32 f5 = 5;
     */
    f5: number;
}
/**
 * @generated from protobuf message p2F11
 */
export interface p2F11 {
    /**
     * @generated from protobuf field: p3F64657230 p3F64657230 = 64657230;
     */
    p3F64657230?: p3F64657230;
}
/**
 * @generated from protobuf message p3F151635310
 */
export interface p3F151635310 {
    /**
     * @generated from protobuf field: int32 pip = 1;
     */
    pip: number;
}
/**
 * @generated from protobuf message p3F64657230
 */
export interface p3F64657230 {
    /**
     * @generated from protobuf field: int32 backPlay = 1;
     */
    backPlay: number;
}
/**
 * @generated from protobuf message Setting
 */
export interface Setting {
    /**
     * @generated from protobuf field: repeated st1F6 st1F6 = 6;
     */
    st1F6: st1F6[];
    /**
     * @generated from protobuf field: st1F7 st1F7 = 7;
     */
    st1F7?: st1F7;
    /**
     * @generated from protobuf field: st1F10 st1F10 = 10;
     */
    st1F10?: st1F10;
}
/**
 * @generated from protobuf message st1F6
 */
export interface st1F6 {
    /**
     * @generated from protobuf field: st2F88478200 st2F88478200 = 88478200;
     */
    st2F88478200?: st2F88478200;
    /**
     * @generated from protobuf field: st2F66930374 st2F66930374 = 66930374;
     */
    st2F66930374?: st2F66930374;
}
/**
 * @generated from protobuf message st1F7
 */
export interface st1F7 {
    /**
     * @generated from protobuf field: st2F88478200 st2F88478200 = 88478200;
     */
    st2F88478200?: st2F88478200;
}
/**
 * @generated from protobuf message st1F10
 */
export interface st1F10 {
    /**
     * @generated from protobuf field: st2F4 st2F4 = 4;
     */
    st2F4?: st2F4;
}
/**
 * @generated from protobuf message st2F4
 */
export interface st2F4 {
    /**
     * @generated from protobuf field: uint64 f1 = 1 [jstype = JS_STRING];
     */
    f1: string;
    /**
     * @generated from protobuf field: fixed32 f2 = 2;
     */
    f2: number;
    /**
     * @generated from protobuf field: fixed32 f3 = 3;
     */
    f3: number;
}
/**
 * @generated from protobuf message st2F88478200
 */
export interface st2F88478200 {
    /**
     *  st3F1 st3F1 = 1;
     *
     * @generated from protobuf field: int32 f2 = 2;
     */
    f2: number;
    /**
     * @generated from protobuf field: int32 f3 = 3;
     */
    f3: number;
    /**
     * @generated from protobuf field: st3F5 st3F5 = 5;
     */
    st3F5?: st3F5;
    /**
     * @generated from protobuf field: int32 f6 = 6;
     */
    f6: number;
    /**
     * @generated from protobuf field: int32 f7 = 7;
     */
    f7: number;
    /**
     * @generated from protobuf field: int32 f8 = 8;
     */
    f8: number;
    /**
     * @generated from protobuf field: int32 f9 = 9;
     */
    f9: number;
    /**
     * @generated from protobuf field: int32 f10 = 10;
     */
    f10: number;
    /**
     * @generated from protobuf field: int32 f12 = 12;
     */
    f12: number;
}
/**
 * @generated from protobuf message st2F66930374
 */
export interface st2F66930374 {
    /**
     * @generated from protobuf field: repeated st3F3 st3F3 = 3;
     */
    st3F3: st3F3[];
    /**
     * @generated from protobuf field: int32 num = 4;
     */
    num: number;
}
/**
 * @generated from protobuf message st3F1
 */
export interface st3F1 {
    /**
     * @generated from protobuf field: st4F1 st4F1 = 1;
     */
    st4F1?: st4F1;
}
/**
 * @generated from protobuf message st3F3
 */
export interface st3F3 {
    /**
     * @generated from protobuf field: st4F61331416 st4F61331416 = 61331416;
     */
    st4F61331416?: st4F61331416;
}
/**
 * @generated from protobuf message st3F5
 */
export interface st3F5 {
    /**
     * @generated from protobuf field: int32 f1 = 1;
     */
    f1: number;
    /**
     * @generated from protobuf field: int32 f2 = 2;
     */
    f2: number;
    /**
     * @generated from protobuf field: int32 f3 = 3;
     */
    f3: number;
    /**
     * @generated from protobuf field: st2F4 st2F4 = 4;
     */
    st2F4?: st2F4;
}
/**
 * @generated from protobuf message st4F1
 */
export interface st4F1 {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
}
/**
 * @generated from protobuf message st4F61331416
 */
export interface st4F61331416 {
    /**
     * @generated from protobuf field: st5F5 st5F5 = 5;
     */
    st5F5?: st5F5;
    /**
     * @generated from protobuf field: st5F5 st5F6 = 6;
     */
    st5F6?: st5F5;
    /**
     * @generated from protobuf field: st3F5 st3F5 = 13;
     */
    st3F5?: st3F5;
    /**
     * @generated from protobuf field: int32 f15 = 15;
     */
    f15: number;
}
/**
 * @generated from protobuf message st5F5
 */
export interface st5F5 {
    /**
     * @generated from protobuf field: st3F5 st3F5 = 2;
     */
    st3F5?: st3F5;
    /**
     * @generated from protobuf field: st6F81212182 st6F81212182 = 81212182;
     */
    st6F81212182?: st6F81212182;
}
/**
 * @generated from protobuf message st6F81212182
 */
export interface st6F81212182 {
    /**
     * @generated from protobuf field: st7F1 st7F1 = 1;
     */
    st7F1?: st7F1;
}
/**
 * @generated from protobuf message st7F1
 */
export interface st7F1 {
    /**
     * @generated from protobuf field: st8F1 st8F1 = 1;
     */
    st8F1?: st8F1;
    /**
     * @generated from protobuf field: int32 f3 = 3;
     */
    f3: number;
}
/**
 * @generated from protobuf message st8F1
 */
export interface st8F1 {
    /**
     * @generated from protobuf field: int32 f1 = 1;
     */
    f1: number;
}
/**
 * @generated from protobuf message DownloadAction
 */
export interface DownloadAction {
    /**
     * @generated from protobuf field: da1F2 da1F2 = 2;
     */
    da1F2?: da1F2;
    /**
     * @generated from protobuf field: da2F2 da1F4 = 4;
     */
    da1F4?: da2F2;
}
/**
 * @generated from protobuf message da1F2
 */
export interface da1F2 {
    /**
     * @generated from protobuf field: da2F2 da2F2 = 2;
     */
    da2F2?: da2F2;
    /**
     * @generated from protobuf field: optional n2F204158123 n2F204158123 = 204158123;
     */
    n2F204158123?: n2F204158123;
    /**
     * @generated from protobuf field: optional n3F174116574 n3F174116574 = 174116574;
     */
    n3F174116574?: n3F174116574;
}
/**
 * @generated from protobuf message n2F204158123
 */
export interface n2F204158123 {
    /**
     * @generated from protobuf field: n3F278463287 n3F278463287 = 278463287;
     */
    n3F278463287?: n3F278463287;
}
/**
 * @generated from protobuf message n3F278463287
 */
export interface n3F278463287 {
}
/**
 * @generated from protobuf message da2F2
 */
export interface da2F2 {
    /**
     * @generated from protobuf field: int32 f1 = 1;
     */
    f1: number;
    /**
     * @generated from protobuf field: int32 f2 = 2;
     */
    f2: number;
    /**
     * @generated from protobuf field: da3F4 da3F4 = 4;
     */
    da3F4?: da3F4;
    /**
     * @generated from protobuf field: string da3F6 = 6;
     */
    da3F6: string;
}
/**
 * @generated from protobuf message da3F4
 */
export interface da3F4 {
    /**
     * @generated from protobuf field: uint64 f1 = 1;
     */
    f1: bigint;
    /**
     * uint32 f1 = 1;
     *
     * @generated from protobuf field: float f2 = 2;
     */
    f2: number;
    /**
     * @generated from protobuf field: float f3 = 3;
     */
    f3: number;
}
/**
 * @generated from protobuf message n3F174116574
 */
export interface n3F174116574 {
    /**
     * @generated from protobuf field: da4F1 da4F1 = 1;
     */
    da4F1?: da4F1;
}
/**
 * @generated from protobuf message da4F1
 */
export interface da4F1 {
    /**
     * @generated from protobuf field: da2F2 da5F2 = 2;
     */
    da5F2?: da2F2;
    /**
     * @generated from protobuf field: da5F73080600 da5F73080600 = 73080600;
     */
    da5F73080600?: da5F73080600;
}
/**
 * @generated from protobuf message da5F73080600
 */
export interface da5F73080600 {
    /**
     * @generated from protobuf field: string videoId = 1;
     */
    videoId: string;
    /**
     * @generated from protobuf field: int32 da6F2 = 2;
     */
    da6F2: number;
    /**
     * @generated from protobuf field: da6F4 da6F4 = 4;
     */
    da6F4?: da6F4;
    /**
     * @generated from protobuf field: da6F6 da6F6 = 6;
     */
    da6F6?: da6F6;
}
/**
 * @generated from protobuf message da6F4
 */
export interface da6F4 {
    /**
     * @generated from protobuf field: n60572968 n60572968 = 60572968;
     */
    n60572968?: n60572968;
}
/**
 * @generated from protobuf message da6F6
 */
export interface da6F6 {
    /**
     * @generated from protobuf field: int32 f1 = 1;
     */
    f1: number;
    /**
     * @generated from protobuf field: int32 f2 = 2;
     */
    f2: number;
}
/**
 * @generated from protobuf message n60572968
 */
export interface n60572968 {
    /**
     * @generated from protobuf field: int32 da7F1 = 1;
     */
    da7F1: number;
    /**
     * @generated from protobuf field: da2F2 da7F4 = 4;
     */
    da7F4?: da2F2;
}
// @generated message type with reflection information, may provide speed optimized methods
class Browse$Type extends MessageType<Browse> {
    constructor() {
        super("Browse", [
            { no: 1, name: "responseContext", kind: "message", T: () => ResponseContext },
            { no: 9, name: "n1F9", kind: "message", T: () => n1F9 },
            { no: 10, name: "n1F10", kind: "message", T: () => n1F10 }
        ]);
    }
    create(value?: PartialMessage<Browse>): Browse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Browse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Browse): Browse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ResponseContext responseContext */ 1:
                    message.responseContext = ResponseContext.internalBinaryRead(reader, reader.uint32(), options, message.responseContext);
                    break;
                case /* n1F9 n1F9 */ 9:
                    message.n1F9 = n1F9.internalBinaryRead(reader, reader.uint32(), options, message.n1F9);
                    break;
                case /* n1F10 n1F10 */ 10:
                    message.n1F10 = n1F10.internalBinaryRead(reader, reader.uint32(), options, message.n1F10);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Browse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ResponseContext responseContext = 1; */
        if (message.responseContext)
            ResponseContext.internalBinaryWrite(message.responseContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* n1F9 n1F9 = 9; */
        if (message.n1F9)
            n1F9.internalBinaryWrite(message.n1F9, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* n1F10 n1F10 = 10; */
        if (message.n1F10)
            n1F10.internalBinaryWrite(message.n1F10, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Browse
 */
export const Browse = new Browse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseContext$Type extends MessageType<ResponseContext> {
    constructor() {
        super("ResponseContext", [
            { no: 6, name: "serviceTrackingParams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceTrackingParams }
        ]);
    }
    create(value?: PartialMessage<ResponseContext>): ResponseContext {
        const message = { serviceTrackingParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResponseContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseContext): ResponseContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServiceTrackingParams serviceTrackingParams */ 6:
                    message.serviceTrackingParams.push(ServiceTrackingParams.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServiceTrackingParams serviceTrackingParams = 6; */
        for (let i = 0; i < message.serviceTrackingParams.length; i++)
            ServiceTrackingParams.internalBinaryWrite(message.serviceTrackingParams[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ResponseContext
 */
export const ResponseContext = new ResponseContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceTrackingParams$Type extends MessageType<ServiceTrackingParams> {
    constructor() {
        super("ServiceTrackingParams", [
            { no: 1, name: "service", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Params }
        ]);
    }
    create(value?: PartialMessage<ServiceTrackingParams>): ServiceTrackingParams {
        const message = { service: 0, params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServiceTrackingParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceTrackingParams): ServiceTrackingParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 service */ 1:
                    message.service = reader.int32();
                    break;
                case /* repeated Params params */ 2:
                    message.params.push(Params.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceTrackingParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 service = 1; */
        if (message.service !== 0)
            writer.tag(1, WireType.Varint).int32(message.service);
        /* repeated Params params = 2; */
        for (let i = 0; i < message.params.length; i++)
            Params.internalBinaryWrite(message.params[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceTrackingParams
 */
export const ServiceTrackingParams = new ServiceTrackingParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
    constructor() {
        super("Params", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Params>): Params {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n1F9$Type extends MessageType<n1F9> {
    constructor() {
        super("n1F9", [
            { no: 58173949, name: "m2F58173949", kind: "message", T: () => m2F58173949 },
            { no: 153515154, name: "n6F153515154", kind: "message", T: () => n6F153515154 },
            { no: 49399797, name: "n2F49399797", kind: "message", T: () => n2F49399797 }
        ]);
    }
    create(value?: PartialMessage<n1F9>): n1F9 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n1F9>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n1F9): n1F9 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* m2F58173949 m2F58173949 */ 58173949:
                    message.m2F58173949 = m2F58173949.internalBinaryRead(reader, reader.uint32(), options, message.m2F58173949);
                    break;
                case /* n6F153515154 n6F153515154 */ 153515154:
                    message.n6F153515154 = n6F153515154.internalBinaryRead(reader, reader.uint32(), options, message.n6F153515154);
                    break;
                case /* n2F49399797 n2F49399797 */ 49399797:
                    message.n2F49399797 = n2F49399797.internalBinaryRead(reader, reader.uint32(), options, message.n2F49399797);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n1F9, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* m2F58173949 m2F58173949 = 58173949; */
        if (message.m2F58173949)
            m2F58173949.internalBinaryWrite(message.m2F58173949, writer.tag(58173949, WireType.LengthDelimited).fork(), options).join();
        /* n6F153515154 n6F153515154 = 153515154; */
        if (message.n6F153515154)
            n6F153515154.internalBinaryWrite(message.n6F153515154, writer.tag(153515154, WireType.LengthDelimited).fork(), options).join();
        /* n2F49399797 n2F49399797 = 49399797; */
        if (message.n2F49399797)
            n2F49399797.internalBinaryWrite(message.n2F49399797, writer.tag(49399797, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n1F9
 */
export const n1F9 = new n1F9$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n1F10$Type extends MessageType<n1F10> {
    constructor() {
        super("n1F10", [
            { no: 49399797, name: "n2F49399797", kind: "message", T: () => n2F49399797 }
        ]);
    }
    create(value?: PartialMessage<n1F10>): n1F10 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n1F10>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n1F10): n1F10 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n2F49399797 n2F49399797 */ 49399797:
                    message.n2F49399797 = n2F49399797.internalBinaryRead(reader, reader.uint32(), options, message.n2F49399797);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n1F10, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n2F49399797 n2F49399797 = 49399797; */
        if (message.n2F49399797)
            n2F49399797.internalBinaryWrite(message.n2F49399797, writer.tag(49399797, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n1F10
 */
export const n1F10 = new n1F10$Type();
// @generated message type with reflection information, may provide speed optimized methods
class m2F58173949$Type extends MessageType<m2F58173949> {
    constructor() {
        super("m2F58173949", [
            { no: 1, name: "m3F1", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => m3F1 }
        ]);
    }
    create(value?: PartialMessage<m2F58173949>): m2F58173949 {
        const message = { m3F1: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<m2F58173949>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: m2F58173949): m2F58173949 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated m3F1 m3F1 */ 1:
                    message.m3F1.push(m3F1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: m2F58173949, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated m3F1 m3F1 = 1; */
        for (let i = 0; i < message.m3F1.length; i++)
            m3F1.internalBinaryWrite(message.m3F1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message m2F58173949
 */
export const m2F58173949 = new m2F58173949$Type();
// @generated message type with reflection information, may provide speed optimized methods
class m3F1$Type extends MessageType<m3F1> {
    constructor() {
        super("m3F1", [
            { no: 58174010, name: "m4F58174010", kind: "message", T: () => m4F58174010 }
        ]);
    }
    create(value?: PartialMessage<m3F1>): m3F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<m3F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: m3F1): m3F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* m4F58174010 m4F58174010 */ 58174010:
                    message.m4F58174010 = m4F58174010.internalBinaryRead(reader, reader.uint32(), options, message.m4F58174010);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: m3F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* m4F58174010 m4F58174010 = 58174010; */
        if (message.m4F58174010)
            m4F58174010.internalBinaryWrite(message.m4F58174010, writer.tag(58174010, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message m3F1
 */
export const m3F1 = new m3F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class m4F58174010$Type extends MessageType<m4F58174010> {
    constructor() {
        super("m4F58174010", [
            { no: 4, name: "n1F10", kind: "message", T: () => n1F10 }
        ]);
    }
    create(value?: PartialMessage<m4F58174010>): m4F58174010 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<m4F58174010>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: m4F58174010): m4F58174010 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n1F10 n1F10 */ 4:
                    message.n1F10 = n1F10.internalBinaryRead(reader, reader.uint32(), options, message.n1F10);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: m4F58174010, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n1F10 n1F10 = 4; */
        if (message.n1F10)
            n1F10.internalBinaryWrite(message.n1F10, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message m4F58174010
 */
export const m4F58174010 = new m4F58174010$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n2F49399797$Type extends MessageType<n2F49399797> {
    constructor() {
        super("n2F49399797", [
            { no: 1, name: "n3F1", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => n3F1 }
        ]);
    }
    create(value?: PartialMessage<n2F49399797>): n2F49399797 {
        const message = { n3F1: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n2F49399797>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n2F49399797): n2F49399797 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated n3F1 n3F1 */ 1:
                    message.n3F1.push(n3F1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n2F49399797, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated n3F1 n3F1 = 1; */
        for (let i = 0; i < message.n3F1.length; i++)
            n3F1.internalBinaryWrite(message.n3F1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n2F49399797
 */
export const n2F49399797 = new n2F49399797$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n3F1$Type extends MessageType<n3F1> {
    constructor() {
        super("n3F1", [
            { no: 50195462, name: "n4F50195462", kind: "message", T: () => n4F50195462 },
            { no: 51845067, name: "n4F51845067", kind: "message", T: () => n4F51845067 },
            { no: 221496734, name: "m4F221496734", kind: "message", T: () => n4F221496734 }
        ]);
    }
    create(value?: PartialMessage<n3F1>): n3F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n3F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n3F1): n3F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n4F50195462 n4F50195462 */ 50195462:
                    message.n4F50195462 = n4F50195462.internalBinaryRead(reader, reader.uint32(), options, message.n4F50195462);
                    break;
                case /* n4F51845067 n4F51845067 */ 51845067:
                    message.n4F51845067 = n4F51845067.internalBinaryRead(reader, reader.uint32(), options, message.n4F51845067);
                    break;
                case /* n4F221496734 m4F221496734 */ 221496734:
                    message.m4F221496734 = n4F221496734.internalBinaryRead(reader, reader.uint32(), options, message.m4F221496734);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n3F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n4F50195462 n4F50195462 = 50195462; */
        if (message.n4F50195462)
            n4F50195462.internalBinaryWrite(message.n4F50195462, writer.tag(50195462, WireType.LengthDelimited).fork(), options).join();
        /* n4F51845067 n4F51845067 = 51845067; */
        if (message.n4F51845067)
            n4F51845067.internalBinaryWrite(message.n4F51845067, writer.tag(51845067, WireType.LengthDelimited).fork(), options).join();
        /* n4F221496734 m4F221496734 = 221496734; */
        if (message.m4F221496734)
            n4F221496734.internalBinaryWrite(message.m4F221496734, writer.tag(221496734, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n3F1
 */
export const n3F1 = new n3F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n4F50195462$Type extends MessageType<n4F50195462> {
    constructor() {
        super("n4F50195462", [
            { no: 1, name: "n5F1", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => n5F1 }
        ]);
    }
    create(value?: PartialMessage<n4F50195462>): n4F50195462 {
        const message = { n5F1: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n4F50195462>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n4F50195462): n4F50195462 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated n5F1 n5F1 */ 1:
                    message.n5F1.push(n5F1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n4F50195462, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated n5F1 n5F1 = 1; */
        for (let i = 0; i < message.n5F1.length; i++)
            n5F1.internalBinaryWrite(message.n5F1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n4F50195462
 */
export const n4F50195462 = new n4F50195462$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n4F51845067$Type extends MessageType<n4F51845067> {
    constructor() {
        super("n4F51845067", [
            { no: 5, name: "n5F5", kind: "message", T: () => n5F5 }
        ]);
    }
    create(value?: PartialMessage<n4F51845067>): n4F51845067 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n4F51845067>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n4F51845067): n4F51845067 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n5F5 n5F5 */ 5:
                    message.n5F5 = n5F5.internalBinaryRead(reader, reader.uint32(), options, message.n5F5);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n4F51845067, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n5F5 n5F5 = 5; */
        if (message.n5F5)
            n5F5.internalBinaryWrite(message.n5F5, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n4F51845067
 */
export const n4F51845067 = new n4F51845067$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n4F221496734$Type extends MessageType<n4F221496734> {
    constructor() {
        super("n4F221496734", [
            { no: 3, name: "n5F3", kind: "message", T: () => n5F3 },
            { no: 10, name: "n5F10", kind: "message", T: () => n5F10 }
        ]);
    }
    create(value?: PartialMessage<n4F221496734>): n4F221496734 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n4F221496734>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n4F221496734): n4F221496734 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n5F3 n5F3 */ 3:
                    message.n5F3 = n5F3.internalBinaryRead(reader, reader.uint32(), options, message.n5F3);
                    break;
                case /* n5F10 n5F10 */ 10:
                    message.n5F10 = n5F10.internalBinaryRead(reader, reader.uint32(), options, message.n5F10);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n4F221496734, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n5F3 n5F3 = 3; */
        if (message.n5F3)
            n5F3.internalBinaryWrite(message.n5F3, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* n5F10 n5F10 = 10; */
        if (message.n5F10)
            n5F10.internalBinaryWrite(message.n5F10, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n4F221496734
 */
export const n4F221496734 = new n4F221496734$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n5F1$Type extends MessageType<n5F1> {
    constructor() {
        super("n5F1", [
            { no: 153515154, name: "n6F153515154", kind: "message", T: () => n6F153515154 }
        ]);
    }
    create(value?: PartialMessage<n5F1>): n5F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n5F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n5F1): n5F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n6F153515154 n6F153515154 */ 153515154:
                    message.n6F153515154 = n6F153515154.internalBinaryRead(reader, reader.uint32(), options, message.n6F153515154);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n5F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n6F153515154 n6F153515154 = 153515154; */
        if (message.n6F153515154)
            n6F153515154.internalBinaryWrite(message.n6F153515154, writer.tag(153515154, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n5F1
 */
export const n5F1 = new n5F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n5F3$Type extends MessageType<n5F3> {
    constructor() {
        super("n5F3", [
            { no: 1, name: "n6F1", kind: "message", T: () => n6F1 }
        ]);
    }
    create(value?: PartialMessage<n5F3>): n5F3 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n5F3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n5F3): n5F3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n6F1 n6F1 */ 1:
                    message.n6F1 = n6F1.internalBinaryRead(reader, reader.uint32(), options, message.n6F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n5F3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n6F1 n6F1 = 1; */
        if (message.n6F1)
            n6F1.internalBinaryWrite(message.n6F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n5F3
 */
export const n5F3 = new n5F3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n5F5$Type extends MessageType<n5F5> {
    constructor() {
        super("n5F5", [
            { no: 51431404, name: "n6F51431404", kind: "message", T: () => n6F51431404 }
        ]);
    }
    create(value?: PartialMessage<n5F5>): n5F5 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n5F5>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n5F5): n5F5 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n6F51431404 n6F51431404 */ 51431404:
                    message.n6F51431404 = n6F51431404.internalBinaryRead(reader, reader.uint32(), options, message.n6F51431404);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n5F5, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n6F51431404 n6F51431404 = 51431404; */
        if (message.n6F51431404)
            n6F51431404.internalBinaryWrite(message.n6F51431404, writer.tag(51431404, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n5F5
 */
export const n5F5 = new n5F5$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n6F1$Type extends MessageType<n6F1> {
    constructor() {
        super("n6F1", [
            { no: 1, name: "staticLyric", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<n6F1>): n6F1 {
        const message = { staticLyric: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n6F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n6F1): n6F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string staticLyric */ 1:
                    message.staticLyric = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n6F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string staticLyric = 1; */
        if (message.staticLyric !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.staticLyric);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n6F1
 */
export const n6F1 = new n6F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n6F153515154$Type extends MessageType<n6F153515154> {
    constructor() {
        super("n6F153515154", [
            { no: 172660663, name: "n7F172660663", kind: "message", T: () => n7F172660663 }
        ]);
    }
    create(value?: PartialMessage<n6F153515154>): n6F153515154 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n6F153515154>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n6F153515154): n6F153515154 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n7F172660663 n7F172660663 */ 172660663:
                    message.n7F172660663 = n7F172660663.internalBinaryRead(reader, reader.uint32(), options, message.n7F172660663);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n6F153515154, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n7F172660663 n7F172660663 = 172660663; */
        if (message.n7F172660663)
            n7F172660663.internalBinaryWrite(message.n7F172660663, writer.tag(172660663, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n6F153515154
 */
export const n6F153515154 = new n6F153515154$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n6F51431404$Type extends MessageType<n6F51431404> {
    constructor() {
        super("n6F51431404", [
            { no: 1, name: "n5F1", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => n5F1 }
        ]);
    }
    create(value?: PartialMessage<n6F51431404>): n6F51431404 {
        const message = { n5F1: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n6F51431404>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n6F51431404): n6F51431404 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated n5F1 n5F1 */ 1:
                    message.n5F1.push(n5F1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n6F51431404, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated n5F1 n5F1 = 1; */
        for (let i = 0; i < message.n5F1.length; i++)
            n5F1.internalBinaryWrite(message.n5F1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n6F51431404
 */
export const n6F51431404 = new n6F51431404$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n7F172660663$Type extends MessageType<n7F172660663> {
    constructor() {
        super("n7F172660663", [
            { no: 1, name: "n8F1", kind: "message", T: () => n8F1 },
            { no: 2, name: "n8F2", kind: "message", T: () => n8F2 },
            { no: 3, name: "n8F3", kind: "message", T: () => n8F3 }
        ]);
    }
    create(value?: PartialMessage<n7F172660663>): n7F172660663 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n7F172660663>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n7F172660663): n7F172660663 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n8F1 n8F1 */ 1:
                    message.n8F1 = n8F1.internalBinaryRead(reader, reader.uint32(), options, message.n8F1);
                    break;
                case /* n8F2 n8F2 */ 2:
                    message.n8F2 = n8F2.internalBinaryRead(reader, reader.uint32(), options, message.n8F2);
                    break;
                case /* n8F3 n8F3 */ 3:
                    message.n8F3 = n8F3.internalBinaryRead(reader, reader.uint32(), options, message.n8F3);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n7F172660663, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n8F1 n8F1 = 1; */
        if (message.n8F1)
            n8F1.internalBinaryWrite(message.n8F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* n8F2 n8F2 = 2; */
        if (message.n8F2)
            n8F2.internalBinaryWrite(message.n8F2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* n8F3 n8F3 = 3; */
        if (message.n8F3)
            n8F3.internalBinaryWrite(message.n8F3, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n7F172660663
 */
export const n7F172660663 = new n7F172660663$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n5F10$Type extends MessageType<n5F10> {
    constructor() {
        super("n5F10", [
            { no: 1, name: "origin", kind: "message", T: () => Origin }
        ]);
    }
    create(value?: PartialMessage<n5F10>): n5F10 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n5F10>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n5F10): n5F10 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Origin origin */ 1:
                    message.origin = Origin.internalBinaryRead(reader, reader.uint32(), options, message.origin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n5F10, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Origin origin = 1; */
        if (message.origin)
            Origin.internalBinaryWrite(message.origin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n5F10
 */
export const n5F10 = new n5F10$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n8F1$Type extends MessageType<n8F1> {
    constructor() {
        super("n8F1", [
            { no: 168777401, name: "n9F168777401", kind: "message", T: () => n9F168777401 }
        ]);
    }
    create(value?: PartialMessage<n8F1>): n8F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n8F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n8F1): n8F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n9F168777401 n9F168777401 */ 168777401:
                    message.n9F168777401 = n9F168777401.internalBinaryRead(reader, reader.uint32(), options, message.n9F168777401);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n8F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n9F168777401 n9F168777401 = 168777401; */
        if (message.n9F168777401)
            n9F168777401.internalBinaryWrite(message.n9F168777401, writer.tag(168777401, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n8F1
 */
export const n8F1 = new n8F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n8F2$Type extends MessageType<n8F2> {
    constructor() {
        super("n8F2", [
            { no: 183314536, name: "n9F183314536", kind: "message", T: () => n9F183314536 }
        ]);
    }
    create(value?: PartialMessage<n8F2>): n8F2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n8F2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n8F2): n8F2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n9F183314536 n9F183314536 */ 183314536:
                    message.n9F183314536 = n9F183314536.internalBinaryRead(reader, reader.uint32(), options, message.n9F183314536);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n8F2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n9F183314536 n9F183314536 = 183314536; */
        if (message.n9F183314536)
            n9F183314536.internalBinaryWrite(message.n9F183314536, writer.tag(183314536, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n8F2
 */
export const n8F2 = new n8F2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n8F3$Type extends MessageType<n8F3> {
    constructor() {
        super("n8F3", [
            { no: 1, name: "n8F1", kind: "message", T: () => n8F1 },
            { no: 2, name: "n8F2", kind: "message", T: () => n8F2 }
        ]);
    }
    create(value?: PartialMessage<n8F3>): n8F3 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n8F3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n8F3): n8F3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n8F1 n8F1 */ 1:
                    message.n8F1 = n8F1.internalBinaryRead(reader, reader.uint32(), options, message.n8F1);
                    break;
                case /* n8F2 n8F2 */ 2:
                    message.n8F2 = n8F2.internalBinaryRead(reader, reader.uint32(), options, message.n8F2);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n8F3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n8F1 n8F1 = 1; */
        if (message.n8F1)
            n8F1.internalBinaryWrite(message.n8F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* n8F2 n8F2 = 2; */
        if (message.n8F2)
            n8F2.internalBinaryWrite(message.n8F2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n8F3
 */
export const n8F3 = new n8F3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Origin$Type extends MessageType<Origin> {
    constructor() {
        super("Origin", [
            { no: 1, name: "originText", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Origin>): Origin {
        const message = { originText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Origin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Origin): Origin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string originText */ 1:
                    message.originText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Origin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string originText = 1; */
        if (message.originText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.originText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Origin
 */
export const Origin = new Origin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n9F168777401$Type extends MessageType<n9F168777401> {
    constructor() {
        super("n9F168777401", [
            { no: 3, name: "n10F3", kind: "message", T: () => n10F3 },
            { no: 5, name: "n10F5", kind: "message", T: () => n10F5 }
        ]);
    }
    create(value?: PartialMessage<n9F168777401>): n9F168777401 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n9F168777401>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n9F168777401): n9F168777401 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n10F3 n10F3 */ 3:
                    message.n10F3 = n10F3.internalBinaryRead(reader, reader.uint32(), options, message.n10F3);
                    break;
                case /* n10F5 n10F5 */ 5:
                    message.n10F5 = n10F5.internalBinaryRead(reader, reader.uint32(), options, message.n10F5);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n9F168777401, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n10F3 n10F3 = 3; */
        if (message.n10F3)
            n10F3.internalBinaryWrite(message.n10F3, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* n10F5 n10F5 = 5; */
        if (message.n10F5)
            n10F5.internalBinaryWrite(message.n10F5, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n9F168777401
 */
export const n9F168777401 = new n9F168777401$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n9F183314536$Type extends MessageType<n9F183314536> {
    constructor() {
        super("n9F183314536", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<n9F183314536>): n9F183314536 {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n9F183314536>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n9F183314536): n9F183314536 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n9F183314536, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n9F183314536
 */
export const n9F183314536 = new n9F183314536$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n10F3$Type extends MessageType<n10F3> {
    constructor() {
        super("n10F3", [
            { no: 172035250, name: "n11F172035250", kind: "message", T: () => n11F172035250 }
        ]);
    }
    create(value?: PartialMessage<n10F3>): n10F3 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n10F3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n10F3): n10F3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n11F172035250 n11F172035250 */ 172035250:
                    message.n11F172035250 = n11F172035250.internalBinaryRead(reader, reader.uint32(), options, message.n11F172035250);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n10F3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n11F172035250 n11F172035250 = 172035250; */
        if (message.n11F172035250)
            n11F172035250.internalBinaryWrite(message.n11F172035250, writer.tag(172035250, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n10F3
 */
export const n10F3 = new n10F3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n10F5$Type extends MessageType<n10F5> {
    constructor() {
        super("n10F5", [
            { no: 465160965, name: "n11F465160965", kind: "message", T: () => n11F465160965 }
        ]);
    }
    create(value?: PartialMessage<n10F5>): n10F5 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n10F5>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n10F5): n10F5 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n11F465160965 n11F465160965 */ 465160965:
                    message.n11F465160965 = n11F465160965.internalBinaryRead(reader, reader.uint32(), options, message.n11F465160965);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n10F5, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n11F465160965 n11F465160965 = 465160965; */
        if (message.n11F465160965)
            n11F465160965.internalBinaryWrite(message.n11F465160965, writer.tag(465160965, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n10F5
 */
export const n10F5 = new n10F5$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n11F465160965$Type extends MessageType<n11F465160965> {
    constructor() {
        super("n11F465160965", [
            { no: 4, name: "n12F4", kind: "message", T: () => n12F4 }
        ]);
    }
    create(value?: PartialMessage<n11F465160965>): n11F465160965 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n11F465160965>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n11F465160965): n11F465160965 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n12F4 n12F4 */ 4:
                    message.n12F4 = n12F4.internalBinaryRead(reader, reader.uint32(), options, message.n12F4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n11F465160965, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n12F4 n12F4 = 4; */
        if (message.n12F4)
            n12F4.internalBinaryWrite(message.n12F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n11F465160965
 */
export const n11F465160965 = new n11F465160965$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n12F4$Type extends MessageType<n12F4> {
    constructor() {
        super("n12F4", [
            { no: 1, name: "n13F1", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => n13F1 },
            { no: 2, name: "originText", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<n12F4>): n12F4 {
        const message = { n13F1: [], originText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n12F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n12F4): n12F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated n13F1 n13F1 */ 1:
                    message.n13F1.push(n13F1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string originText */ 2:
                    message.originText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n12F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated n13F1 n13F1 = 1; */
        for (let i = 0; i < message.n13F1.length; i++)
            n13F1.internalBinaryWrite(message.n13F1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string originText = 2; */
        if (message.originText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.originText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n12F4
 */
export const n12F4 = new n12F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n13F1$Type extends MessageType<n13F1> {
    constructor() {
        super("n13F1", [
            { no: 1, name: "f1", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<n13F1>): n13F1 {
        const message = { f1: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n13F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n13F1): n13F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string f1 */ 1:
                    message.f1 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n13F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string f1 = 1; */
        if (message.f1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.f1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n13F1
 */
export const n13F1 = new n13F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n11F172035250$Type extends MessageType<n11F172035250> {
    constructor() {
        super("n11F172035250", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<n11F172035250>): n11F172035250 {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n11F172035250>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n11F172035250): n11F172035250 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n11F172035250, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n11F172035250
 */
export const n11F172035250 = new n11F172035250$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Next$Type extends MessageType<Next> {
    constructor() {
        super("Next", [
            { no: 7, name: "a1F7", kind: "message", T: () => a1F7 },
            { no: 8, name: "a1F8", kind: "message", T: () => a1F8 }
        ]);
    }
    create(value?: PartialMessage<Next>): Next {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Next>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Next): Next {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* a1F7 a1F7 */ 7:
                    message.a1F7 = a1F7.internalBinaryRead(reader, reader.uint32(), options, message.a1F7);
                    break;
                case /* a1F8 a1F8 */ 8:
                    message.a1F8 = a1F8.internalBinaryRead(reader, reader.uint32(), options, message.a1F8);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Next, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* a1F7 a1F7 = 7; */
        if (message.a1F7)
            a1F7.internalBinaryWrite(message.a1F7, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* a1F8 a1F8 = 8; */
        if (message.a1F8)
            a1F8.internalBinaryWrite(message.a1F8, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Next
 */
export const Next = new Next$Type();
// @generated message type with reflection information, may provide speed optimized methods
class a1F7$Type extends MessageType<a1F7> {
    constructor() {
        super("a1F7", [
            { no: 51779735, name: "a2F51779735", kind: "message", T: () => a2F51779735 },
            { no: 125354411, name: "musicPlayRender", kind: "message", T: () => MusicPlayRender }
        ]);
    }
    create(value?: PartialMessage<a1F7>): a1F7 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<a1F7>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: a1F7): a1F7 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* a2F51779735 a2F51779735 */ 51779735:
                    message.a2F51779735 = a2F51779735.internalBinaryRead(reader, reader.uint32(), options, message.a2F51779735);
                    break;
                case /* MusicPlayRender musicPlayRender */ 125354411:
                    message.musicPlayRender = MusicPlayRender.internalBinaryRead(reader, reader.uint32(), options, message.musicPlayRender);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: a1F7, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* a2F51779735 a2F51779735 = 51779735; */
        if (message.a2F51779735)
            a2F51779735.internalBinaryWrite(message.a2F51779735, writer.tag(51779735, WireType.LengthDelimited).fork(), options).join();
        /* MusicPlayRender musicPlayRender = 125354411; */
        if (message.musicPlayRender)
            MusicPlayRender.internalBinaryWrite(message.musicPlayRender, writer.tag(125354411, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message a1F7
 */
export const a1F7 = new a1F7$Type();
// @generated message type with reflection information, may provide speed optimized methods
class a1F8$Type extends MessageType<a1F8> {
    constructor() {
        super("a1F8", [
            { no: 49399797, name: "n2F49399797", kind: "message", T: () => n2F49399797 }
        ]);
    }
    create(value?: PartialMessage<a1F8>): a1F8 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<a1F8>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: a1F8): a1F8 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n2F49399797 n2F49399797 */ 49399797:
                    message.n2F49399797 = n2F49399797.internalBinaryRead(reader, reader.uint32(), options, message.n2F49399797);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: a1F8, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n2F49399797 n2F49399797 = 49399797; */
        if (message.n2F49399797)
            n2F49399797.internalBinaryWrite(message.n2F49399797, writer.tag(49399797, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message a1F8
 */
export const a1F8 = new a1F8$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicPlayRender$Type extends MessageType<MusicPlayRender> {
    constructor() {
        super("MusicPlayRender", [
            { no: 7, name: "bottomRender", kind: "message", T: () => BottomRender }
        ]);
    }
    create(value?: PartialMessage<MusicPlayRender>): MusicPlayRender {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicPlayRender>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicPlayRender): MusicPlayRender {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BottomRender bottomRender */ 7:
                    message.bottomRender = BottomRender.internalBinaryRead(reader, reader.uint32(), options, message.bottomRender);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicPlayRender, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BottomRender bottomRender = 7; */
        if (message.bottomRender)
            BottomRender.internalBinaryWrite(message.bottomRender, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MusicPlayRender
 */
export const MusicPlayRender = new MusicPlayRender$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BottomRender$Type extends MessageType<BottomRender> {
    constructor() {
        super("BottomRender", [
            { no: 91700600, name: "sectionTab", kind: "message", T: () => SectionTab }
        ]);
    }
    create(value?: PartialMessage<BottomRender>): BottomRender {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BottomRender>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BottomRender): BottomRender {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SectionTab sectionTab */ 91700600:
                    message.sectionTab = SectionTab.internalBinaryRead(reader, reader.uint32(), options, message.sectionTab);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BottomRender, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SectionTab sectionTab = 91700600; */
        if (message.sectionTab)
            SectionTab.internalBinaryWrite(message.sectionTab, writer.tag(91700600, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BottomRender
 */
export const BottomRender = new BottomRender$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SectionTab$Type extends MessageType<SectionTab> {
    constructor() {
        super("SectionTab", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<SectionTab>): SectionTab {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SectionTab>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SectionTab): SectionTab {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Item items */ 1:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SectionTab, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SectionTab
 */
export const SectionTab = new SectionTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("Item", [
            { no: 58174010, name: "tab", kind: "message", T: () => Tab }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Tab tab */ 58174010:
                    message.tab = Tab.internalBinaryRead(reader, reader.uint32(), options, message.tab);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Tab tab = 58174010; */
        if (message.tab)
            Tab.internalBinaryWrite(message.tab, writer.tag(58174010, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tab$Type extends MessageType<Tab> {
    constructor() {
        super("Tab", [
            { no: 1, name: "info", kind: "message", T: () => Info },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Tab>): Tab {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tab>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tab): Tab {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Info info */ 1:
                    message.info = Info.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tab, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Info info = 1; */
        if (message.info)
            Info.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Tab
 */
export const Tab = new Tab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Info$Type extends MessageType<Info> {
    constructor() {
        super("Info", [
            { no: 48687626, name: "BrowseInfo", kind: "message", jsonName: "BrowseInfo", T: () => BrowseInfo }
        ]);
    }
    create(value?: PartialMessage<Info>): Info {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Info): Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BrowseInfo BrowseInfo = 48687626 [json_name = "BrowseInfo"];*/ 48687626:
                    message.browseInfo = BrowseInfo.internalBinaryRead(reader, reader.uint32(), options, message.browseInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BrowseInfo BrowseInfo = 48687626 [json_name = "BrowseInfo"]; */
        if (message.browseInfo)
            BrowseInfo.internalBinaryWrite(message.browseInfo, writer.tag(48687626, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Info
 */
export const Info = new Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrowseInfo$Type extends MessageType<BrowseInfo> {
    constructor() {
        super("BrowseInfo", [
            { no: 2, name: "browseId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrowseInfo>): BrowseInfo {
        const message = { browseId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BrowseInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrowseInfo): BrowseInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string browseId */ 2:
                    message.browseId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrowseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string browseId = 2; */
        if (message.browseId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.browseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrowseInfo
 */
export const BrowseInfo = new BrowseInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class a2F51779735$Type extends MessageType<a2F51779735> {
    constructor() {
        super("a2F51779735", [
            { no: 1, name: "a3F1", kind: "message", T: () => a3F1 }
        ]);
    }
    create(value?: PartialMessage<a2F51779735>): a2F51779735 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<a2F51779735>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: a2F51779735): a2F51779735 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* a3F1 a3F1 */ 1:
                    message.a3F1 = a3F1.internalBinaryRead(reader, reader.uint32(), options, message.a3F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: a2F51779735, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* a3F1 a3F1 = 1; */
        if (message.a3F1)
            a3F1.internalBinaryWrite(message.a3F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message a2F51779735
 */
export const a2F51779735 = new a2F51779735$Type();
// @generated message type with reflection information, may provide speed optimized methods
class a3F1$Type extends MessageType<a3F1> {
    constructor() {
        super("a3F1", [
            { no: 49399797, name: "n2F49399797", kind: "message", T: () => n2F49399797 }
        ]);
    }
    create(value?: PartialMessage<a3F1>): a3F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<a3F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: a3F1): a3F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n2F49399797 n2F49399797 */ 49399797:
                    message.n2F49399797 = n2F49399797.internalBinaryRead(reader, reader.uint32(), options, message.n2F49399797);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: a3F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n2F49399797 n2F49399797 = 49399797; */
        if (message.n2F49399797)
            n2F49399797.internalBinaryWrite(message.n2F49399797, writer.tag(49399797, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message a3F1
 */
export const a3F1 = new a3F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Search$Type extends MessageType<Search> {
    constructor() {
        super("Search", [
            { no: 4, name: "s1F4", kind: "message", T: () => s1F4 },
            { no: 7, name: "s1F7", kind: "message", T: () => s1F7 }
        ]);
    }
    create(value?: PartialMessage<Search>): Search {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Search>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Search): Search {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* s1F4 s1F4 */ 4:
                    message.s1F4 = s1F4.internalBinaryRead(reader, reader.uint32(), options, message.s1F4);
                    break;
                case /* s1F7 s1F7 */ 7:
                    message.s1F7 = s1F7.internalBinaryRead(reader, reader.uint32(), options, message.s1F7);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Search, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* s1F4 s1F4 = 4; */
        if (message.s1F4)
            s1F4.internalBinaryWrite(message.s1F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* s1F7 s1F7 = 7; */
        if (message.s1F7)
            s1F7.internalBinaryWrite(message.s1F7, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Search
 */
export const Search = new Search$Type();
// @generated message type with reflection information, may provide speed optimized methods
class s1F4$Type extends MessageType<s1F4> {
    constructor() {
        super("s1F4", [
            { no: 49399797, name: "n2F49399797", kind: "message", T: () => n2F49399797 }
        ]);
    }
    create(value?: PartialMessage<s1F4>): s1F4 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<s1F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: s1F4): s1F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n2F49399797 n2F49399797 */ 49399797:
                    message.n2F49399797 = n2F49399797.internalBinaryRead(reader, reader.uint32(), options, message.n2F49399797);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: s1F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n2F49399797 n2F49399797 = 49399797; */
        if (message.n2F49399797)
            n2F49399797.internalBinaryWrite(message.n2F49399797, writer.tag(49399797, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s1F4
 */
export const s1F4 = new s1F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class s1F7$Type extends MessageType<s1F7> {
    constructor() {
        super("s1F7", [
            { no: 50195462, name: "n4F50195462", kind: "message", T: () => n4F50195462 },
            { no: 49399797, name: "n2F49399797", kind: "message", T: () => n2F49399797 }
        ]);
    }
    create(value?: PartialMessage<s1F7>): s1F7 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<s1F7>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: s1F7): s1F7 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n4F50195462 n4F50195462 */ 50195462:
                    message.n4F50195462 = n4F50195462.internalBinaryRead(reader, reader.uint32(), options, message.n4F50195462);
                    break;
                case /* n2F49399797 n2F49399797 */ 49399797:
                    message.n2F49399797 = n2F49399797.internalBinaryRead(reader, reader.uint32(), options, message.n2F49399797);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: s1F7, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n4F50195462 n4F50195462 = 50195462; */
        if (message.n4F50195462)
            n4F50195462.internalBinaryWrite(message.n4F50195462, writer.tag(50195462, WireType.LengthDelimited).fork(), options).join();
        /* n2F49399797 n2F49399797 = 49399797; */
        if (message.n2F49399797)
            n2F49399797.internalBinaryWrite(message.n2F49399797, writer.tag(49399797, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message s1F7
 */
export const s1F7 = new s1F7$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shorts$Type extends MessageType<Shorts> {
    constructor() {
        super("Shorts", [
            { no: 2, name: "t1F2", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => t1F2 }
        ]);
    }
    create(value?: PartialMessage<Shorts>): Shorts {
        const message = { t1F2: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Shorts>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shorts): Shorts {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated t1F2 t1F2 */ 2:
                    message.t1F2.push(t1F2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shorts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated t1F2 t1F2 = 2; */
        for (let i = 0; i < message.t1F2.length; i++)
            t1F2.internalBinaryWrite(message.t1F2[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shorts
 */
export const Shorts = new Shorts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class t1F2$Type extends MessageType<t1F2> {
    constructor() {
        super("t1F2", [
            { no: 1, name: "n2F1", kind: "message", T: () => n2F1 }
        ]);
    }
    create(value?: PartialMessage<t1F2>): t1F2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<t1F2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: t1F2): t1F2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n2F1 n2F1 */ 1:
                    message.n2F1 = n2F1.internalBinaryRead(reader, reader.uint32(), options, message.n2F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: t1F2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n2F1 n2F1 = 1; */
        if (message.n2F1)
            n2F1.internalBinaryWrite(message.n2F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message t1F2
 */
export const t1F2 = new t1F2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n2F1$Type extends MessageType<n2F1> {
    constructor() {
        super("n2F1", [
            { no: 139608561, name: "n3F139608561", kind: "message", T: () => n3F139608561 }
        ]);
    }
    create(value?: PartialMessage<n2F1>): n2F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n2F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n2F1): n2F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n3F139608561 n3F139608561 */ 139608561:
                    message.n3F139608561 = n3F139608561.internalBinaryRead(reader, reader.uint32(), options, message.n3F139608561);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n2F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n3F139608561 n3F139608561 = 139608561; */
        if (message.n3F139608561)
            n3F139608561.internalBinaryWrite(message.n3F139608561, writer.tag(139608561, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n2F1
 */
export const n2F1 = new n2F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n3F139608561$Type extends MessageType<n3F139608561> {
    constructor() {
        super("n3F139608561", [
            { no: 8, name: "n4F8", kind: "message", T: () => n4F8 }
        ]);
    }
    create(value?: PartialMessage<n3F139608561>): n3F139608561 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n3F139608561>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n3F139608561): n3F139608561 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n4F8 n4F8 */ 8:
                    message.n4F8 = n4F8.internalBinaryRead(reader, reader.uint32(), options, message.n4F8);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n3F139608561, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n4F8 n4F8 = 8; */
        if (message.n4F8)
            n4F8.internalBinaryWrite(message.n4F8, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n3F139608561
 */
export const n3F139608561 = new n3F139608561$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n4F8$Type extends MessageType<n4F8> {
    constructor() {
        super("n4F8", [
            { no: 139970731, name: "n4F139970731", kind: "message", T: () => n4F139970731 }
        ]);
    }
    create(value?: PartialMessage<n4F8>): n4F8 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n4F8>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n4F8): n4F8 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n4F139970731 n4F139970731 */ 139970731:
                    message.n4F139970731 = n4F139970731.internalBinaryRead(reader, reader.uint32(), options, message.n4F139970731);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n4F8, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n4F139970731 n4F139970731 = 139970731; */
        if (message.n4F139970731)
            n4F139970731.internalBinaryWrite(message.n4F139970731, writer.tag(139970731, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n4F8
 */
export const n4F8 = new n4F8$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n4F139970731$Type extends MessageType<n4F139970731> {
    constructor() {
        super("n4F139970731", [
            { no: 12, name: "f1", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<n4F139970731>): n4F139970731 {
        const message = { f1: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n4F139970731>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n4F139970731): n4F139970731 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f1 */ 12:
                    message.f1 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n4F139970731, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f1 = 12; */
        if (message.f1 !== 0)
            writer.tag(12, WireType.Varint).int32(message.f1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n4F139970731
 */
export const n4F139970731 = new n4F139970731$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Guide$Type extends MessageType<Guide> {
    constructor() {
        super("Guide", [
            { no: 4, name: "g1F4", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => g1F4 },
            { no: 6, name: "g1F6", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => g1F6 }
        ]);
    }
    create(value?: PartialMessage<Guide>): Guide {
        const message = { g1F4: [], g1F6: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Guide>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Guide): Guide {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated g1F4 g1F4 */ 4:
                    message.g1F4.push(g1F4.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated g1F6 g1F6 */ 6:
                    message.g1F6.push(g1F6.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Guide, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated g1F4 g1F4 = 4; */
        for (let i = 0; i < message.g1F4.length; i++)
            g1F4.internalBinaryWrite(message.g1F4[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated g1F6 g1F6 = 6; */
        for (let i = 0; i < message.g1F6.length; i++)
            g1F6.internalBinaryWrite(message.g1F6[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Guide
 */
export const Guide = new Guide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class g1F4$Type extends MessageType<g1F4> {
    constructor() {
        super("g1F4", [
            { no: 117866661, name: "g2F117866661", kind: "message", T: () => g2F117866661 }
        ]);
    }
    create(value?: PartialMessage<g1F4>): g1F4 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<g1F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: g1F4): g1F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* g2F117866661 g2F117866661 */ 117866661:
                    message.g2F117866661 = g2F117866661.internalBinaryRead(reader, reader.uint32(), options, message.g2F117866661);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: g1F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* g2F117866661 g2F117866661 = 117866661; */
        if (message.g2F117866661)
            g2F117866661.internalBinaryWrite(message.g2F117866661, writer.tag(117866661, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message g1F4
 */
export const g1F4 = new g1F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class g1F6$Type extends MessageType<g1F6> {
    constructor() {
        super("g1F6", [
            { no: 117866661, name: "g2F117866661", kind: "message", T: () => g2F117866661 }
        ]);
    }
    create(value?: PartialMessage<g1F6>): g1F6 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<g1F6>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: g1F6): g1F6 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* g2F117866661 g2F117866661 */ 117866661:
                    message.g2F117866661 = g2F117866661.internalBinaryRead(reader, reader.uint32(), options, message.g2F117866661);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: g1F6, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* g2F117866661 g2F117866661 = 117866661; */
        if (message.g2F117866661)
            g2F117866661.internalBinaryWrite(message.g2F117866661, writer.tag(117866661, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message g1F6
 */
export const g1F6 = new g1F6$Type();
// @generated message type with reflection information, may provide speed optimized methods
class g2F117866661$Type extends MessageType<g2F117866661> {
    constructor() {
        super("g2F117866661", [
            { no: 1, name: "g3F1", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => g3F1 }
        ]);
    }
    create(value?: PartialMessage<g2F117866661>): g2F117866661 {
        const message = { g3F1: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<g2F117866661>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: g2F117866661): g2F117866661 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated g3F1 g3F1 */ 1:
                    message.g3F1.push(g3F1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: g2F117866661, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated g3F1 g3F1 = 1; */
        for (let i = 0; i < message.g3F1.length; i++)
            g3F1.internalBinaryWrite(message.g3F1[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message g2F117866661
 */
export const g2F117866661 = new g2F117866661$Type();
// @generated message type with reflection information, may provide speed optimized methods
class g3F1$Type extends MessageType<g3F1> {
    constructor() {
        super("g3F1", [
            { no: 318370163, name: "iconRender", kind: "message", T: () => guideEntryRenderer },
            { no: 117501096, name: "labelRender", kind: "message", T: () => guideEntryRenderer }
        ]);
    }
    create(value?: PartialMessage<g3F1>): g3F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<g3F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: g3F1): g3F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* guideEntryRenderer iconRender */ 318370163:
                    message.iconRender = guideEntryRenderer.internalBinaryRead(reader, reader.uint32(), options, message.iconRender);
                    break;
                case /* guideEntryRenderer labelRender */ 117501096:
                    message.labelRender = guideEntryRenderer.internalBinaryRead(reader, reader.uint32(), options, message.labelRender);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: g3F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* guideEntryRenderer iconRender = 318370163; */
        if (message.iconRender)
            guideEntryRenderer.internalBinaryWrite(message.iconRender, writer.tag(318370163, WireType.LengthDelimited).fork(), options).join();
        /* guideEntryRenderer labelRender = 117501096; */
        if (message.labelRender)
            guideEntryRenderer.internalBinaryWrite(message.labelRender, writer.tag(117501096, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message g3F1
 */
export const g3F1 = new g3F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class guideEntryRenderer$Type extends MessageType<guideEntryRenderer> {
    constructor() {
        super("guideEntryRenderer", [
            { no: 1, name: "browseId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<guideEntryRenderer>): guideEntryRenderer {
        const message = { browseId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<guideEntryRenderer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: guideEntryRenderer): guideEntryRenderer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string browseId */ 1:
                    message.browseId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: guideEntryRenderer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string browseId = 1; */
        if (message.browseId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.browseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message guideEntryRenderer
 */
export const guideEntryRenderer = new guideEntryRenderer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Name$Type extends MessageType<Name> {
    constructor() {
        super("Name", [
            { no: 1, name: "runs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Name_Runs }
        ]);
    }
    create(value?: PartialMessage<Name>): Name {
        const message = { runs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Name>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Name): Name {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Name.Runs runs */ 1:
                    message.runs.push(Name_Runs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Name, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Name.Runs runs = 1; */
        for (let i = 0; i < message.runs.length; i++)
            Name_Runs.internalBinaryWrite(message.runs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Name
 */
export const Name = new Name$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Name_Runs$Type extends MessageType<Name_Runs> {
    constructor() {
        super("Name.Runs", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Name_Runs>): Name_Runs {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Name_Runs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Name_Runs): Name_Runs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Name_Runs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Name.Runs
 */
export const Name_Runs = new Name_Runs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("Player", [
            { no: 7, name: "p1F7", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => p1F7 },
            { no: 2, name: "p1F2", kind: "message", T: () => p1F2 },
            { no: 4, name: "p1F4", kind: "message", T: () => p1F4 },
            { no: 10, name: "captions", kind: "message", T: () => Player_Captions },
            { no: 14, name: "p1F14", kind: "message", T: () => p1F14 }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = { p1F7: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated p1F7 p1F7 */ 7:
                    message.p1F7.push(p1F7.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* p1F2 p1F2 */ 2:
                    message.p1F2 = p1F2.internalBinaryRead(reader, reader.uint32(), options, message.p1F2);
                    break;
                case /* p1F4 p1F4 */ 4:
                    message.p1F4 = p1F4.internalBinaryRead(reader, reader.uint32(), options, message.p1F4);
                    break;
                case /* Player.Captions captions */ 10:
                    message.captions = Player_Captions.internalBinaryRead(reader, reader.uint32(), options, message.captions);
                    break;
                case /* p1F14 p1F14 */ 14:
                    message.p1F14 = p1F14.internalBinaryRead(reader, reader.uint32(), options, message.p1F14);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated p1F7 p1F7 = 7; */
        for (let i = 0; i < message.p1F7.length; i++)
            p1F7.internalBinaryWrite(message.p1F7[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* p1F2 p1F2 = 2; */
        if (message.p1F2)
            p1F2.internalBinaryWrite(message.p1F2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* p1F4 p1F4 = 4; */
        if (message.p1F4)
            p1F4.internalBinaryWrite(message.p1F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Player.Captions captions = 10; */
        if (message.captions)
            Player_Captions.internalBinaryWrite(message.captions, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* p1F14 p1F14 = 14; */
        if (message.p1F14)
            p1F14.internalBinaryWrite(message.p1F14, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Captions$Type extends MessageType<Player_Captions> {
    constructor() {
        super("Player.Captions", [
            { no: 51621377, name: "playerCaptionsTracklistRenderer", kind: "message", T: () => Player_Captions_PlayerCaptionsTracklistRenderer }
        ]);
    }
    create(value?: PartialMessage<Player_Captions>): Player_Captions {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player_Captions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player_Captions): Player_Captions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Player.Captions.PlayerCaptionsTracklistRenderer playerCaptionsTracklistRenderer */ 51621377:
                    message.playerCaptionsTracklistRenderer = Player_Captions_PlayerCaptionsTracklistRenderer.internalBinaryRead(reader, reader.uint32(), options, message.playerCaptionsTracklistRenderer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player_Captions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Player.Captions.PlayerCaptionsTracklistRenderer playerCaptionsTracklistRenderer = 51621377; */
        if (message.playerCaptionsTracklistRenderer)
            Player_Captions_PlayerCaptionsTracklistRenderer.internalBinaryWrite(message.playerCaptionsTracklistRenderer, writer.tag(51621377, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Captions
 */
export const Player_Captions = new Player_Captions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Captions_PlayerCaptionsTracklistRenderer$Type extends MessageType<Player_Captions_PlayerCaptionsTracklistRenderer> {
    constructor() {
        super("Player.Captions.PlayerCaptionsTracklistRenderer", [
            { no: 1, name: "captionTracks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks },
            { no: 2, name: "audioTracks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks },
            { no: 3, name: "translationLanguages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages },
            { no: 4, name: "defaultAudioTrackIndex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "defaultCaptionTrackIndex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Player_Captions_PlayerCaptionsTracklistRenderer>): Player_Captions_PlayerCaptionsTracklistRenderer {
        const message = { captionTracks: [], audioTracks: [], translationLanguages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player_Captions_PlayerCaptionsTracklistRenderer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player_Captions_PlayerCaptionsTracklistRenderer): Player_Captions_PlayerCaptionsTracklistRenderer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Player.Captions.PlayerCaptionsTracklistRenderer.CaptionTracks captionTracks */ 1:
                    message.captionTracks.push(Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Player.Captions.PlayerCaptionsTracklistRenderer.AudioTracks audioTracks */ 2:
                    message.audioTracks.push(Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Player.Captions.PlayerCaptionsTracklistRenderer.TranslationLanguages translationLanguages */ 3:
                    message.translationLanguages.push(Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 defaultAudioTrackIndex */ 4:
                    message.defaultAudioTrackIndex = reader.int32();
                    break;
                case /* optional int32 defaultCaptionTrackIndex */ 6:
                    message.defaultCaptionTrackIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player_Captions_PlayerCaptionsTracklistRenderer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Player.Captions.PlayerCaptionsTracklistRenderer.CaptionTracks captionTracks = 1; */
        for (let i = 0; i < message.captionTracks.length; i++)
            Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks.internalBinaryWrite(message.captionTracks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Player.Captions.PlayerCaptionsTracklistRenderer.AudioTracks audioTracks = 2; */
        for (let i = 0; i < message.audioTracks.length; i++)
            Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks.internalBinaryWrite(message.audioTracks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated Player.Captions.PlayerCaptionsTracklistRenderer.TranslationLanguages translationLanguages = 3; */
        for (let i = 0; i < message.translationLanguages.length; i++)
            Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages.internalBinaryWrite(message.translationLanguages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 defaultAudioTrackIndex = 4; */
        if (message.defaultAudioTrackIndex !== undefined)
            writer.tag(4, WireType.Varint).int32(message.defaultAudioTrackIndex);
        /* optional int32 defaultCaptionTrackIndex = 6; */
        if (message.defaultCaptionTrackIndex !== undefined)
            writer.tag(6, WireType.Varint).int32(message.defaultCaptionTrackIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Captions.PlayerCaptionsTracklistRenderer
 */
export const Player_Captions_PlayerCaptionsTracklistRenderer = new Player_Captions_PlayerCaptionsTracklistRenderer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks$Type extends MessageType<Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks> {
    constructor() {
        super("Player.Captions.PlayerCaptionsTracklistRenderer.CaptionTracks", [
            { no: 1, name: "baseUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "message", T: () => Name },
            { no: 3, name: "vssId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "languageCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "kind", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "rtl", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "isTranslatable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks>): Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks {
        const message = { baseUrl: "", vssId: "", languageCode: "", isTranslatable: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks): Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string baseUrl */ 1:
                    message.baseUrl = reader.string();
                    break;
                case /* Name name */ 2:
                    message.name = Name.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* string vssId */ 3:
                    message.vssId = reader.string();
                    break;
                case /* string languageCode */ 4:
                    message.languageCode = reader.string();
                    break;
                case /* optional string kind */ 5:
                    message.kind = reader.string();
                    break;
                case /* optional bool rtl */ 6:
                    message.rtl = reader.bool();
                    break;
                case /* bool isTranslatable */ 7:
                    message.isTranslatable = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string baseUrl = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        /* Name name = 2; */
        if (message.name)
            Name.internalBinaryWrite(message.name, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string vssId = 3; */
        if (message.vssId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.vssId);
        /* string languageCode = 4; */
        if (message.languageCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.languageCode);
        /* optional string kind = 5; */
        if (message.kind !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.kind);
        /* optional bool rtl = 6; */
        if (message.rtl !== undefined)
            writer.tag(6, WireType.Varint).bool(message.rtl);
        /* bool isTranslatable = 7; */
        if (message.isTranslatable !== false)
            writer.tag(7, WireType.Varint).bool(message.isTranslatable);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Captions.PlayerCaptionsTracklistRenderer.CaptionTracks
 */
export const Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks = new Player_Captions_PlayerCaptionsTracklistRenderer_CaptionTracks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks$Type extends MessageType<Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks> {
    constructor() {
        super("Player.Captions.PlayerCaptionsTracklistRenderer.AudioTracks", [
            { no: 2, name: "captionTrackIndices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "defaultCaptionTrackIndex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "forcedCaptionTrackIndex", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "visibility", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "hasDefaultTrack", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "hasForcedTrack", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "audioTrackId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "captionsInitialState", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks>): Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks {
        const message = { captionTrackIndices: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks): Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 captionTrackIndices = 2 [packed = false];*/ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.captionTrackIndices.push(reader.int32());
                    else
                        message.captionTrackIndices.push(reader.int32());
                    break;
                case /* optional int32 defaultCaptionTrackIndex */ 3:
                    message.defaultCaptionTrackIndex = reader.int32();
                    break;
                case /* optional int32 forcedCaptionTrackIndex */ 4:
                    message.forcedCaptionTrackIndex = reader.int32();
                    break;
                case /* optional int32 visibility */ 5:
                    message.visibility = reader.int32();
                    break;
                case /* optional bool hasDefaultTrack */ 6:
                    message.hasDefaultTrack = reader.bool();
                    break;
                case /* optional bool hasForcedTrack */ 7:
                    message.hasForcedTrack = reader.bool();
                    break;
                case /* optional string audioTrackId */ 8:
                    message.audioTrackId = reader.string();
                    break;
                case /* optional int32 captionsInitialState */ 11:
                    message.captionsInitialState = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 captionTrackIndices = 2 [packed = false]; */
        for (let i = 0; i < message.captionTrackIndices.length; i++)
            writer.tag(2, WireType.Varint).int32(message.captionTrackIndices[i]);
        /* optional int32 defaultCaptionTrackIndex = 3; */
        if (message.defaultCaptionTrackIndex !== undefined)
            writer.tag(3, WireType.Varint).int32(message.defaultCaptionTrackIndex);
        /* optional int32 forcedCaptionTrackIndex = 4; */
        if (message.forcedCaptionTrackIndex !== undefined)
            writer.tag(4, WireType.Varint).int32(message.forcedCaptionTrackIndex);
        /* optional int32 visibility = 5; */
        if (message.visibility !== undefined)
            writer.tag(5, WireType.Varint).int32(message.visibility);
        /* optional bool hasDefaultTrack = 6; */
        if (message.hasDefaultTrack !== undefined)
            writer.tag(6, WireType.Varint).bool(message.hasDefaultTrack);
        /* optional bool hasForcedTrack = 7; */
        if (message.hasForcedTrack !== undefined)
            writer.tag(7, WireType.Varint).bool(message.hasForcedTrack);
        /* optional string audioTrackId = 8; */
        if (message.audioTrackId !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.audioTrackId);
        /* optional int32 captionsInitialState = 11; */
        if (message.captionsInitialState !== undefined)
            writer.tag(11, WireType.Varint).int32(message.captionsInitialState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Captions.PlayerCaptionsTracklistRenderer.AudioTracks
 */
export const Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks = new Player_Captions_PlayerCaptionsTracklistRenderer_AudioTracks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages$Type extends MessageType<Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages> {
    constructor() {
        super("Player.Captions.PlayerCaptionsTracklistRenderer.TranslationLanguages", [
            { no: 1, name: "languageCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "languageName", kind: "message", T: () => Name }
        ]);
    }
    create(value?: PartialMessage<Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages>): Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages {
        const message = { languageCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages): Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string languageCode */ 1:
                    message.languageCode = reader.string();
                    break;
                case /* Name languageName */ 2:
                    message.languageName = Name.internalBinaryRead(reader, reader.uint32(), options, message.languageName);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string languageCode = 1; */
        if (message.languageCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.languageCode);
        /* Name languageName = 2; */
        if (message.languageName)
            Name.internalBinaryWrite(message.languageName, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player.Captions.PlayerCaptionsTracklistRenderer.TranslationLanguages
 */
export const Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages = new Player_Captions_PlayerCaptionsTracklistRenderer_TranslationLanguages$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p1F2$Type extends MessageType<p1F2> {
    constructor() {
        super("p1F2", [
            { no: 1, name: "p2F1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "p2F2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "p2F10", kind: "message", T: () => p2F10 },
            { no: 21, name: "p2F21", kind: "message", T: () => p2F21 },
            { no: 11, name: "p2F11", kind: "message", T: () => p2F11 }
        ]);
    }
    create(value?: PartialMessage<p1F2>): p1F2 {
        const message = { p2F1: 0, p2F2: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p1F2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p1F2): p1F2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 p2F1 */ 1:
                    message.p2F1 = reader.int32();
                    break;
                case /* string p2F2 */ 2:
                    message.p2F2 = reader.string();
                    break;
                case /* p2F10 p2F10 */ 10:
                    message.p2F10 = p2F10.internalBinaryRead(reader, reader.uint32(), options, message.p2F10);
                    break;
                case /* p2F21 p2F21 */ 21:
                    message.p2F21 = p2F21.internalBinaryRead(reader, reader.uint32(), options, message.p2F21);
                    break;
                case /* p2F11 p2F11 */ 11:
                    message.p2F11 = p2F11.internalBinaryRead(reader, reader.uint32(), options, message.p2F11);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p1F2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 p2F1 = 1; */
        if (message.p2F1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.p2F1);
        /* string p2F2 = 2; */
        if (message.p2F2 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.p2F2);
        /* p2F10 p2F10 = 10; */
        if (message.p2F10)
            p2F10.internalBinaryWrite(message.p2F10, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* p2F21 p2F21 = 21; */
        if (message.p2F21)
            p2F21.internalBinaryWrite(message.p2F21, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* p2F11 p2F11 = 11; */
        if (message.p2F11)
            p2F11.internalBinaryWrite(message.p2F11, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p1F2
 */
export const p1F2 = new p1F2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p1F4$Type extends MessageType<p1F4> {
    constructor() {
        super("p1F4", [
            { no: 3, name: "p4F3", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => p4F3 }
        ]);
    }
    create(value?: PartialMessage<p1F4>): p1F4 {
        const message = { p4F3: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p1F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p1F4): p1F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated p4F3 p4F3 */ 3:
                    message.p4F3.push(p4F3.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p1F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated p4F3 p4F3 = 3; */
        for (let i = 0; i < message.p4F3.length; i++)
            p4F3.internalBinaryWrite(message.p4F3[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p1F4
 */
export const p1F4 = new p1F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p4F3$Type extends MessageType<p4F3> {
    constructor() {
        super("p4F3", [
            { no: 2, name: "stream", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "codecs", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "w", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "h", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<p4F3>): p4F3 {
        const message = { stream: "", codecs: "", w: 0, h: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p4F3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p4F3): p4F3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream */ 2:
                    message.stream = reader.string();
                    break;
                case /* string codecs */ 5:
                    message.codecs = reader.string();
                    break;
                case /* uint32 w */ 7:
                    message.w = reader.uint32();
                    break;
                case /* uint32 h */ 8:
                    message.h = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p4F3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream = 2; */
        if (message.stream !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stream);
        /* string codecs = 5; */
        if (message.codecs !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.codecs);
        /* uint32 w = 7; */
        if (message.w !== 0)
            writer.tag(7, WireType.Varint).uint32(message.w);
        /* uint32 h = 8; */
        if (message.h !== 0)
            writer.tag(8, WireType.Varint).uint32(message.h);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p4F3
 */
export const p4F3 = new p4F3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p1F7$Type extends MessageType<p1F7> {
    constructor() {
        super("p1F7", [
            { no: 84813246, name: "p2F84813246", kind: "message", T: () => p2F84813246 }
        ]);
    }
    create(value?: PartialMessage<p1F7>): p1F7 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p1F7>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p1F7): p1F7 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* p2F84813246 p2F84813246 */ 84813246:
                    message.p2F84813246 = p2F84813246.internalBinaryRead(reader, reader.uint32(), options, message.p2F84813246);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p1F7, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* p2F84813246 p2F84813246 = 84813246; */
        if (message.p2F84813246)
            p2F84813246.internalBinaryWrite(message.p2F84813246, writer.tag(84813246, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p1F7
 */
export const p1F7 = new p1F7$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p1F14$Type extends MessageType<p1F14> {
    constructor() {
        super("p1F14", [
            { no: 1, name: "f1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "f2", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "f3", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "f5", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<p1F14>): p1F14 {
        const message = { f1: "", f2: 0, f3: 0, f5: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p1F14>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p1F14): p1F14 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string f1 */ 1:
                    message.f1 = reader.string();
                    break;
                case /* uint32 f2 */ 2:
                    message.f2 = reader.uint32();
                    break;
                case /* uint32 f3 */ 3:
                    message.f3 = reader.uint32();
                    break;
                case /* uint32 f5 */ 5:
                    message.f5 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p1F14, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string f1 = 1; */
        if (message.f1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.f1);
        /* uint32 f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Varint).uint32(message.f2);
        /* uint32 f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Varint).uint32(message.f3);
        /* uint32 f5 = 5; */
        if (message.f5 !== 0)
            writer.tag(5, WireType.Varint).uint32(message.f5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p1F14
 */
export const p1F14 = new p1F14$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p2F84813246$Type extends MessageType<p2F84813246> {
    constructor() {
        super("p2F84813246", [
            { no: 3, name: "v", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<p2F84813246>): p2F84813246 {
        const message = { v: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p2F84813246>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p2F84813246): p2F84813246 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 v */ 3:
                    message.v = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p2F84813246, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 v = 3; */
        if (message.v !== 0)
            writer.tag(3, WireType.Varint).int32(message.v);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p2F84813246
 */
export const p2F84813246 = new p2F84813246$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p2F21$Type extends MessageType<p2F21> {
    constructor() {
        super("p2F21", [
            { no: 151635310, name: "p3F151635310", kind: "message", T: () => p3F151635310 }
        ]);
    }
    create(value?: PartialMessage<p2F21>): p2F21 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p2F21>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p2F21): p2F21 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* p3F151635310 p3F151635310 */ 151635310:
                    message.p3F151635310 = p3F151635310.internalBinaryRead(reader, reader.uint32(), options, message.p3F151635310);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p2F21, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* p3F151635310 p3F151635310 = 151635310; */
        if (message.p3F151635310)
            p3F151635310.internalBinaryWrite(message.p3F151635310, writer.tag(151635310, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p2F21
 */
export const p2F21 = new p2F21$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p2F10$Type extends MessageType<p2F10> {
    constructor() {
        super("p2F10", [
            { no: 60572968, name: "pn60572968", kind: "message", T: () => n60572968 }
        ]);
    }
    create(value?: PartialMessage<p2F10>): p2F10 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p2F10>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p2F10): p2F10 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n60572968 pn60572968 */ 60572968:
                    message.pn60572968 = n60572968.internalBinaryRead(reader, reader.uint32(), options, message.pn60572968);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p2F10, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n60572968 pn60572968 = 60572968; */
        if (message.pn60572968)
            n60572968.internalBinaryWrite(message.pn60572968, writer.tag(60572968, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p2F10
 */
export const p2F10 = new p2F10$Type();
// @generated message type with reflection information, may provide speed optimized methods
class pn60572968$Type extends MessageType<pn60572968> {
    constructor() {
        super("pn60572968", [
            { no: 1, name: "f1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "videoInfo", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => videoInfo }
        ]);
    }
    create(value?: PartialMessage<pn60572968>): pn60572968 {
        const message = { f1: 0, videoInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<pn60572968>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: pn60572968): pn60572968 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f1 */ 1:
                    message.f1 = reader.int32();
                    break;
                case /* repeated videoInfo videoInfo */ 3:
                    message.videoInfo.push(videoInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: pn60572968, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f1 = 1; */
        if (message.f1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.f1);
        /* repeated videoInfo videoInfo = 3; */
        for (let i = 0; i < message.videoInfo.length; i++)
            videoInfo.internalBinaryWrite(message.videoInfo[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pn60572968
 */
export const pn60572968 = new pn60572968$Type();
// @generated message type with reflection information, may provide speed optimized methods
class videoInfo$Type extends MessageType<videoInfo> {
    constructor() {
        super("videoInfo", [
            { no: 3, name: "f3", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "f4", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "f5", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<videoInfo>): videoInfo {
        const message = { f3: 0, f4: 0, f5: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<videoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: videoInfo): videoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f3 */ 3:
                    message.f3 = reader.int32();
                    break;
                case /* int32 f4 */ 4:
                    message.f4 = reader.int32();
                    break;
                case /* int32 f5 */ 5:
                    message.f5 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: videoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Varint).int32(message.f3);
        /* int32 f4 = 4; */
        if (message.f4 !== 0)
            writer.tag(4, WireType.Varint).int32(message.f4);
        /* int32 f5 = 5; */
        if (message.f5 !== 0)
            writer.tag(5, WireType.Varint).int32(message.f5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message videoInfo
 */
export const videoInfo = new videoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p2F11$Type extends MessageType<p2F11> {
    constructor() {
        super("p2F11", [
            { no: 64657230, name: "p3F64657230", kind: "message", T: () => p3F64657230 }
        ]);
    }
    create(value?: PartialMessage<p2F11>): p2F11 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p2F11>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p2F11): p2F11 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* p3F64657230 p3F64657230 */ 64657230:
                    message.p3F64657230 = p3F64657230.internalBinaryRead(reader, reader.uint32(), options, message.p3F64657230);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p2F11, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* p3F64657230 p3F64657230 = 64657230; */
        if (message.p3F64657230)
            p3F64657230.internalBinaryWrite(message.p3F64657230, writer.tag(64657230, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p2F11
 */
export const p2F11 = new p2F11$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p3F151635310$Type extends MessageType<p3F151635310> {
    constructor() {
        super("p3F151635310", [
            { no: 1, name: "pip", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<p3F151635310>): p3F151635310 {
        const message = { pip: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p3F151635310>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p3F151635310): p3F151635310 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 pip */ 1:
                    message.pip = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p3F151635310, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 pip = 1; */
        if (message.pip !== 0)
            writer.tag(1, WireType.Varint).int32(message.pip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p3F151635310
 */
export const p3F151635310 = new p3F151635310$Type();
// @generated message type with reflection information, may provide speed optimized methods
class p3F64657230$Type extends MessageType<p3F64657230> {
    constructor() {
        super("p3F64657230", [
            { no: 1, name: "backPlay", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<p3F64657230>): p3F64657230 {
        const message = { backPlay: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<p3F64657230>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: p3F64657230): p3F64657230 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 backPlay */ 1:
                    message.backPlay = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: p3F64657230, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 backPlay = 1; */
        if (message.backPlay !== 0)
            writer.tag(1, WireType.Varint).int32(message.backPlay);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message p3F64657230
 */
export const p3F64657230 = new p3F64657230$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Setting$Type extends MessageType<Setting> {
    constructor() {
        super("Setting", [
            { no: 6, name: "st1F6", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => st1F6 },
            { no: 7, name: "st1F7", kind: "message", T: () => st1F7 },
            { no: 10, name: "st1F10", kind: "message", T: () => st1F10 }
        ]);
    }
    create(value?: PartialMessage<Setting>): Setting {
        const message = { st1F6: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Setting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Setting): Setting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated st1F6 st1F6 */ 6:
                    message.st1F6.push(st1F6.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* st1F7 st1F7 */ 7:
                    message.st1F7 = st1F7.internalBinaryRead(reader, reader.uint32(), options, message.st1F7);
                    break;
                case /* st1F10 st1F10 */ 10:
                    message.st1F10 = st1F10.internalBinaryRead(reader, reader.uint32(), options, message.st1F10);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Setting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated st1F6 st1F6 = 6; */
        for (let i = 0; i < message.st1F6.length; i++)
            st1F6.internalBinaryWrite(message.st1F6[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* st1F7 st1F7 = 7; */
        if (message.st1F7)
            st1F7.internalBinaryWrite(message.st1F7, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* st1F10 st1F10 = 10; */
        if (message.st1F10)
            st1F10.internalBinaryWrite(message.st1F10, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Setting
 */
export const Setting = new Setting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st1F6$Type extends MessageType<st1F6> {
    constructor() {
        super("st1F6", [
            { no: 88478200, name: "st2F88478200", kind: "message", T: () => st2F88478200 },
            { no: 66930374, name: "st2F66930374", kind: "message", T: () => st2F66930374 }
        ]);
    }
    create(value?: PartialMessage<st1F6>): st1F6 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st1F6>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st1F6): st1F6 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st2F88478200 st2F88478200 */ 88478200:
                    message.st2F88478200 = st2F88478200.internalBinaryRead(reader, reader.uint32(), options, message.st2F88478200);
                    break;
                case /* st2F66930374 st2F66930374 */ 66930374:
                    message.st2F66930374 = st2F66930374.internalBinaryRead(reader, reader.uint32(), options, message.st2F66930374);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st1F6, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st2F88478200 st2F88478200 = 88478200; */
        if (message.st2F88478200)
            st2F88478200.internalBinaryWrite(message.st2F88478200, writer.tag(88478200, WireType.LengthDelimited).fork(), options).join();
        /* st2F66930374 st2F66930374 = 66930374; */
        if (message.st2F66930374)
            st2F66930374.internalBinaryWrite(message.st2F66930374, writer.tag(66930374, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st1F6
 */
export const st1F6 = new st1F6$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st1F7$Type extends MessageType<st1F7> {
    constructor() {
        super("st1F7", [
            { no: 88478200, name: "st2F88478200", kind: "message", T: () => st2F88478200 }
        ]);
    }
    create(value?: PartialMessage<st1F7>): st1F7 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st1F7>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st1F7): st1F7 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st2F88478200 st2F88478200 */ 88478200:
                    message.st2F88478200 = st2F88478200.internalBinaryRead(reader, reader.uint32(), options, message.st2F88478200);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st1F7, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st2F88478200 st2F88478200 = 88478200; */
        if (message.st2F88478200)
            st2F88478200.internalBinaryWrite(message.st2F88478200, writer.tag(88478200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st1F7
 */
export const st1F7 = new st1F7$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st1F10$Type extends MessageType<st1F10> {
    constructor() {
        super("st1F10", [
            { no: 4, name: "st2F4", kind: "message", T: () => st2F4 }
        ]);
    }
    create(value?: PartialMessage<st1F10>): st1F10 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st1F10>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st1F10): st1F10 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st2F4 st2F4 */ 4:
                    message.st2F4 = st2F4.internalBinaryRead(reader, reader.uint32(), options, message.st2F4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st1F10, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st2F4 st2F4 = 4; */
        if (message.st2F4)
            st2F4.internalBinaryWrite(message.st2F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st1F10
 */
export const st1F10 = new st1F10$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st2F4$Type extends MessageType<st2F4> {
    constructor() {
        super("st2F4", [
            { no: 1, name: "f1", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "f2", kind: "scalar", T: 7 /*ScalarType.FIXED32*/ },
            { no: 3, name: "f3", kind: "scalar", T: 7 /*ScalarType.FIXED32*/ }
        ]);
    }
    create(value?: PartialMessage<st2F4>): st2F4 {
        const message = { f1: "0", f2: 0, f3: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st2F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st2F4): st2F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 f1 = 1 [jstype = JS_STRING];*/ 1:
                    message.f1 = reader.uint64().toString();
                    break;
                case /* fixed32 f2 */ 2:
                    message.f2 = reader.fixed32();
                    break;
                case /* fixed32 f3 */ 3:
                    message.f3 = reader.fixed32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st2F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 f1 = 1 [jstype = JS_STRING]; */
        if (message.f1 !== "0")
            writer.tag(1, WireType.Varint).uint64(message.f1);
        /* fixed32 f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Bit32).fixed32(message.f2);
        /* fixed32 f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Bit32).fixed32(message.f3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st2F4
 */
export const st2F4 = new st2F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st2F88478200$Type extends MessageType<st2F88478200> {
    constructor() {
        super("st2F88478200", [
            { no: 2, name: "f2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "f3", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "st3F5", kind: "message", T: () => st3F5 },
            { no: 6, name: "f6", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "f7", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "f8", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "f9", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "f10", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "f12", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<st2F88478200>): st2F88478200 {
        const message = { f2: 0, f3: 0, f6: 0, f7: 0, f8: 0, f9: 0, f10: 0, f12: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st2F88478200>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st2F88478200): st2F88478200 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f2 */ 2:
                    message.f2 = reader.int32();
                    break;
                case /* int32 f3 */ 3:
                    message.f3 = reader.int32();
                    break;
                case /* st3F5 st3F5 */ 5:
                    message.st3F5 = st3F5.internalBinaryRead(reader, reader.uint32(), options, message.st3F5);
                    break;
                case /* int32 f6 */ 6:
                    message.f6 = reader.int32();
                    break;
                case /* int32 f7 */ 7:
                    message.f7 = reader.int32();
                    break;
                case /* int32 f8 */ 8:
                    message.f8 = reader.int32();
                    break;
                case /* int32 f9 */ 9:
                    message.f9 = reader.int32();
                    break;
                case /* int32 f10 */ 10:
                    message.f10 = reader.int32();
                    break;
                case /* int32 f12 */ 12:
                    message.f12 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st2F88478200, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.f2);
        /* int32 f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Varint).int32(message.f3);
        /* st3F5 st3F5 = 5; */
        if (message.st3F5)
            st3F5.internalBinaryWrite(message.st3F5, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 f6 = 6; */
        if (message.f6 !== 0)
            writer.tag(6, WireType.Varint).int32(message.f6);
        /* int32 f7 = 7; */
        if (message.f7 !== 0)
            writer.tag(7, WireType.Varint).int32(message.f7);
        /* int32 f8 = 8; */
        if (message.f8 !== 0)
            writer.tag(8, WireType.Varint).int32(message.f8);
        /* int32 f9 = 9; */
        if (message.f9 !== 0)
            writer.tag(9, WireType.Varint).int32(message.f9);
        /* int32 f10 = 10; */
        if (message.f10 !== 0)
            writer.tag(10, WireType.Varint).int32(message.f10);
        /* int32 f12 = 12; */
        if (message.f12 !== 0)
            writer.tag(12, WireType.Varint).int32(message.f12);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st2F88478200
 */
export const st2F88478200 = new st2F88478200$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st2F66930374$Type extends MessageType<st2F66930374> {
    constructor() {
        super("st2F66930374", [
            { no: 3, name: "st3F3", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => st3F3 },
            { no: 4, name: "num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<st2F66930374>): st2F66930374 {
        const message = { st3F3: [], num: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st2F66930374>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st2F66930374): st2F66930374 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated st3F3 st3F3 */ 3:
                    message.st3F3.push(st3F3.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 num */ 4:
                    message.num = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st2F66930374, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated st3F3 st3F3 = 3; */
        for (let i = 0; i < message.st3F3.length; i++)
            st3F3.internalBinaryWrite(message.st3F3[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 num = 4; */
        if (message.num !== 0)
            writer.tag(4, WireType.Varint).int32(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st2F66930374
 */
export const st2F66930374 = new st2F66930374$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st3F1$Type extends MessageType<st3F1> {
    constructor() {
        super("st3F1", [
            { no: 1, name: "st4F1", kind: "message", T: () => st4F1 }
        ]);
    }
    create(value?: PartialMessage<st3F1>): st3F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st3F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st3F1): st3F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st4F1 st4F1 */ 1:
                    message.st4F1 = st4F1.internalBinaryRead(reader, reader.uint32(), options, message.st4F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st3F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st4F1 st4F1 = 1; */
        if (message.st4F1)
            st4F1.internalBinaryWrite(message.st4F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st3F1
 */
export const st3F1 = new st3F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st3F3$Type extends MessageType<st3F3> {
    constructor() {
        super("st3F3", [
            { no: 61331416, name: "st4F61331416", kind: "message", T: () => st4F61331416 }
        ]);
    }
    create(value?: PartialMessage<st3F3>): st3F3 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st3F3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st3F3): st3F3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st4F61331416 st4F61331416 */ 61331416:
                    message.st4F61331416 = st4F61331416.internalBinaryRead(reader, reader.uint32(), options, message.st4F61331416);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st3F3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st4F61331416 st4F61331416 = 61331416; */
        if (message.st4F61331416)
            st4F61331416.internalBinaryWrite(message.st4F61331416, writer.tag(61331416, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st3F3
 */
export const st3F3 = new st3F3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st3F5$Type extends MessageType<st3F5> {
    constructor() {
        super("st3F5", [
            { no: 1, name: "f1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "f2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "f3", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "st2F4", kind: "message", T: () => st2F4 }
        ]);
    }
    create(value?: PartialMessage<st3F5>): st3F5 {
        const message = { f1: 0, f2: 0, f3: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st3F5>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st3F5): st3F5 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f1 */ 1:
                    message.f1 = reader.int32();
                    break;
                case /* int32 f2 */ 2:
                    message.f2 = reader.int32();
                    break;
                case /* int32 f3 */ 3:
                    message.f3 = reader.int32();
                    break;
                case /* st2F4 st2F4 */ 4:
                    message.st2F4 = st2F4.internalBinaryRead(reader, reader.uint32(), options, message.st2F4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st3F5, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f1 = 1; */
        if (message.f1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.f1);
        /* int32 f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.f2);
        /* int32 f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Varint).int32(message.f3);
        /* st2F4 st2F4 = 4; */
        if (message.st2F4)
            st2F4.internalBinaryWrite(message.st2F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st3F5
 */
export const st3F5 = new st3F5$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st4F1$Type extends MessageType<st4F1> {
    constructor() {
        super("st4F1", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<st4F1>): st4F1 {
        const message = { title: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st4F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st4F1): st4F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st4F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st4F1
 */
export const st4F1 = new st4F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st4F61331416$Type extends MessageType<st4F61331416> {
    constructor() {
        super("st4F61331416", [
            { no: 5, name: "st5F5", kind: "message", T: () => st5F5 },
            { no: 6, name: "st5F6", kind: "message", T: () => st5F5 },
            { no: 13, name: "st3F5", kind: "message", T: () => st3F5 },
            { no: 15, name: "f15", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<st4F61331416>): st4F61331416 {
        const message = { f15: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st4F61331416>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st4F61331416): st4F61331416 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st5F5 st5F5 */ 5:
                    message.st5F5 = st5F5.internalBinaryRead(reader, reader.uint32(), options, message.st5F5);
                    break;
                case /* st5F5 st5F6 */ 6:
                    message.st5F6 = st5F5.internalBinaryRead(reader, reader.uint32(), options, message.st5F6);
                    break;
                case /* st3F5 st3F5 */ 13:
                    message.st3F5 = st3F5.internalBinaryRead(reader, reader.uint32(), options, message.st3F5);
                    break;
                case /* int32 f15 */ 15:
                    message.f15 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st4F61331416, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st5F5 st5F5 = 5; */
        if (message.st5F5)
            st5F5.internalBinaryWrite(message.st5F5, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* st5F5 st5F6 = 6; */
        if (message.st5F6)
            st5F5.internalBinaryWrite(message.st5F6, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* st3F5 st3F5 = 13; */
        if (message.st3F5)
            st3F5.internalBinaryWrite(message.st3F5, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* int32 f15 = 15; */
        if (message.f15 !== 0)
            writer.tag(15, WireType.Varint).int32(message.f15);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st4F61331416
 */
export const st4F61331416 = new st4F61331416$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st5F5$Type extends MessageType<st5F5> {
    constructor() {
        super("st5F5", [
            { no: 2, name: "st3F5", kind: "message", T: () => st3F5 },
            { no: 81212182, name: "st6F81212182", kind: "message", T: () => st6F81212182 }
        ]);
    }
    create(value?: PartialMessage<st5F5>): st5F5 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st5F5>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st5F5): st5F5 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st3F5 st3F5 */ 2:
                    message.st3F5 = st3F5.internalBinaryRead(reader, reader.uint32(), options, message.st3F5);
                    break;
                case /* st6F81212182 st6F81212182 */ 81212182:
                    message.st6F81212182 = st6F81212182.internalBinaryRead(reader, reader.uint32(), options, message.st6F81212182);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st5F5, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st3F5 st3F5 = 2; */
        if (message.st3F5)
            st3F5.internalBinaryWrite(message.st3F5, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* st6F81212182 st6F81212182 = 81212182; */
        if (message.st6F81212182)
            st6F81212182.internalBinaryWrite(message.st6F81212182, writer.tag(81212182, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st5F5
 */
export const st5F5 = new st5F5$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st6F81212182$Type extends MessageType<st6F81212182> {
    constructor() {
        super("st6F81212182", [
            { no: 1, name: "st7F1", kind: "message", T: () => st7F1 }
        ]);
    }
    create(value?: PartialMessage<st6F81212182>): st6F81212182 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st6F81212182>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st6F81212182): st6F81212182 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st7F1 st7F1 */ 1:
                    message.st7F1 = st7F1.internalBinaryRead(reader, reader.uint32(), options, message.st7F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st6F81212182, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st7F1 st7F1 = 1; */
        if (message.st7F1)
            st7F1.internalBinaryWrite(message.st7F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st6F81212182
 */
export const st6F81212182 = new st6F81212182$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st7F1$Type extends MessageType<st7F1> {
    constructor() {
        super("st7F1", [
            { no: 1, name: "st8F1", kind: "message", T: () => st8F1 },
            { no: 3, name: "f3", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<st7F1>): st7F1 {
        const message = { f3: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st7F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st7F1): st7F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* st8F1 st8F1 */ 1:
                    message.st8F1 = st8F1.internalBinaryRead(reader, reader.uint32(), options, message.st8F1);
                    break;
                case /* int32 f3 */ 3:
                    message.f3 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st7F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* st8F1 st8F1 = 1; */
        if (message.st8F1)
            st8F1.internalBinaryWrite(message.st8F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Varint).int32(message.f3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st7F1
 */
export const st7F1 = new st7F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class st8F1$Type extends MessageType<st8F1> {
    constructor() {
        super("st8F1", [
            { no: 1, name: "f1", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<st8F1>): st8F1 {
        const message = { f1: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<st8F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: st8F1): st8F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f1 */ 1:
                    message.f1 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: st8F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f1 = 1; */
        if (message.f1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.f1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message st8F1
 */
export const st8F1 = new st8F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadAction$Type extends MessageType<DownloadAction> {
    constructor() {
        super("DownloadAction", [
            { no: 2, name: "da1F2", kind: "message", T: () => da1F2 },
            { no: 4, name: "da1F4", kind: "message", T: () => da2F2 }
        ]);
    }
    create(value?: PartialMessage<DownloadAction>): DownloadAction {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DownloadAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadAction): DownloadAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* da1F2 da1F2 */ 2:
                    message.da1F2 = da1F2.internalBinaryRead(reader, reader.uint32(), options, message.da1F2);
                    break;
                case /* da2F2 da1F4 */ 4:
                    message.da1F4 = da2F2.internalBinaryRead(reader, reader.uint32(), options, message.da1F4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* da1F2 da1F2 = 2; */
        if (message.da1F2)
            da1F2.internalBinaryWrite(message.da1F2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* da2F2 da1F4 = 4; */
        if (message.da1F4)
            da2F2.internalBinaryWrite(message.da1F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DownloadAction
 */
export const DownloadAction = new DownloadAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da1F2$Type extends MessageType<da1F2> {
    constructor() {
        super("da1F2", [
            { no: 2, name: "da2F2", kind: "message", T: () => da2F2 },
            { no: 204158123, name: "n2F204158123", kind: "message", T: () => n2F204158123 },
            { no: 174116574, name: "n3F174116574", kind: "message", T: () => n3F174116574 }
        ]);
    }
    create(value?: PartialMessage<da1F2>): da1F2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da1F2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da1F2): da1F2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* da2F2 da2F2 */ 2:
                    message.da2F2 = da2F2.internalBinaryRead(reader, reader.uint32(), options, message.da2F2);
                    break;
                case /* optional n2F204158123 n2F204158123 */ 204158123:
                    message.n2F204158123 = n2F204158123.internalBinaryRead(reader, reader.uint32(), options, message.n2F204158123);
                    break;
                case /* optional n3F174116574 n3F174116574 */ 174116574:
                    message.n3F174116574 = n3F174116574.internalBinaryRead(reader, reader.uint32(), options, message.n3F174116574);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da1F2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* da2F2 da2F2 = 2; */
        if (message.da2F2)
            da2F2.internalBinaryWrite(message.da2F2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional n2F204158123 n2F204158123 = 204158123; */
        if (message.n2F204158123)
            n2F204158123.internalBinaryWrite(message.n2F204158123, writer.tag(204158123, WireType.LengthDelimited).fork(), options).join();
        /* optional n3F174116574 n3F174116574 = 174116574; */
        if (message.n3F174116574)
            n3F174116574.internalBinaryWrite(message.n3F174116574, writer.tag(174116574, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da1F2
 */
export const da1F2 = new da1F2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n2F204158123$Type extends MessageType<n2F204158123> {
    constructor() {
        super("n2F204158123", [
            { no: 278463287, name: "n3F278463287", kind: "message", T: () => n3F278463287 }
        ]);
    }
    create(value?: PartialMessage<n2F204158123>): n2F204158123 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n2F204158123>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n2F204158123): n2F204158123 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n3F278463287 n3F278463287 */ 278463287:
                    message.n3F278463287 = n3F278463287.internalBinaryRead(reader, reader.uint32(), options, message.n3F278463287);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n2F204158123, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n3F278463287 n3F278463287 = 278463287; */
        if (message.n3F278463287)
            n3F278463287.internalBinaryWrite(message.n3F278463287, writer.tag(278463287, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n2F204158123
 */
export const n2F204158123 = new n2F204158123$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n3F278463287$Type extends MessageType<n3F278463287> {
    constructor() {
        super("n3F278463287", []);
    }
    create(value?: PartialMessage<n3F278463287>): n3F278463287 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n3F278463287>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n3F278463287): n3F278463287 {
        return target ?? this.create();
    }
    internalBinaryWrite(message: n3F278463287, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n3F278463287
 */
export const n3F278463287 = new n3F278463287$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da2F2$Type extends MessageType<da2F2> {
    constructor() {
        super("da2F2", [
            { no: 1, name: "f1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "f2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "da3F4", kind: "message", T: () => da3F4 },
            { no: 6, name: "da3F6", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<da2F2>): da2F2 {
        const message = { f1: 0, f2: 0, da3F6: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da2F2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da2F2): da2F2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f1 */ 1:
                    message.f1 = reader.int32();
                    break;
                case /* int32 f2 */ 2:
                    message.f2 = reader.int32();
                    break;
                case /* da3F4 da3F4 */ 4:
                    message.da3F4 = da3F4.internalBinaryRead(reader, reader.uint32(), options, message.da3F4);
                    break;
                case /* string da3F6 */ 6:
                    message.da3F6 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da2F2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f1 = 1; */
        if (message.f1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.f1);
        /* int32 f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.f2);
        /* da3F4 da3F4 = 4; */
        if (message.da3F4)
            da3F4.internalBinaryWrite(message.da3F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string da3F6 = 6; */
        if (message.da3F6 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.da3F6);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da2F2
 */
export const da2F2 = new da2F2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da3F4$Type extends MessageType<da3F4> {
    constructor() {
        super("da3F4", [
            { no: 1, name: "f1", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "f2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "f3", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<da3F4>): da3F4 {
        const message = { f1: 0n, f2: 0, f3: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da3F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da3F4): da3F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 f1 */ 1:
                    message.f1 = reader.uint64().toBigInt();
                    break;
                case /* float f2 */ 2:
                    message.f2 = reader.float();
                    break;
                case /* float f3 */ 3:
                    message.f3 = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da3F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 f1 = 1; */
        if (message.f1 !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.f1);
        /* float f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Bit32).float(message.f2);
        /* float f3 = 3; */
        if (message.f3 !== 0)
            writer.tag(3, WireType.Bit32).float(message.f3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da3F4
 */
export const da3F4 = new da3F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n3F174116574$Type extends MessageType<n3F174116574> {
    constructor() {
        super("n3F174116574", [
            { no: 1, name: "da4F1", kind: "message", T: () => da4F1 }
        ]);
    }
    create(value?: PartialMessage<n3F174116574>): n3F174116574 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n3F174116574>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n3F174116574): n3F174116574 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* da4F1 da4F1 */ 1:
                    message.da4F1 = da4F1.internalBinaryRead(reader, reader.uint32(), options, message.da4F1);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n3F174116574, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* da4F1 da4F1 = 1; */
        if (message.da4F1)
            da4F1.internalBinaryWrite(message.da4F1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n3F174116574
 */
export const n3F174116574 = new n3F174116574$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da4F1$Type extends MessageType<da4F1> {
    constructor() {
        super("da4F1", [
            { no: 2, name: "da5F2", kind: "message", T: () => da2F2 },
            { no: 73080600, name: "da5F73080600", kind: "message", T: () => da5F73080600 }
        ]);
    }
    create(value?: PartialMessage<da4F1>): da4F1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da4F1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da4F1): da4F1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* da2F2 da5F2 */ 2:
                    message.da5F2 = da2F2.internalBinaryRead(reader, reader.uint32(), options, message.da5F2);
                    break;
                case /* da5F73080600 da5F73080600 */ 73080600:
                    message.da5F73080600 = da5F73080600.internalBinaryRead(reader, reader.uint32(), options, message.da5F73080600);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da4F1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* da2F2 da5F2 = 2; */
        if (message.da5F2)
            da2F2.internalBinaryWrite(message.da5F2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* da5F73080600 da5F73080600 = 73080600; */
        if (message.da5F73080600)
            da5F73080600.internalBinaryWrite(message.da5F73080600, writer.tag(73080600, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da4F1
 */
export const da4F1 = new da4F1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da5F73080600$Type extends MessageType<da5F73080600> {
    constructor() {
        super("da5F73080600", [
            { no: 1, name: "videoId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "da6F2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "da6F4", kind: "message", T: () => da6F4 },
            { no: 6, name: "da6F6", kind: "message", T: () => da6F6 }
        ]);
    }
    create(value?: PartialMessage<da5F73080600>): da5F73080600 {
        const message = { videoId: "", da6F2: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da5F73080600>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da5F73080600): da5F73080600 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string videoId */ 1:
                    message.videoId = reader.string();
                    break;
                case /* int32 da6F2 */ 2:
                    message.da6F2 = reader.int32();
                    break;
                case /* da6F4 da6F4 */ 4:
                    message.da6F4 = da6F4.internalBinaryRead(reader, reader.uint32(), options, message.da6F4);
                    break;
                case /* da6F6 da6F6 */ 6:
                    message.da6F6 = da6F6.internalBinaryRead(reader, reader.uint32(), options, message.da6F6);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da5F73080600, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string videoId = 1; */
        if (message.videoId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.videoId);
        /* int32 da6F2 = 2; */
        if (message.da6F2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.da6F2);
        /* da6F4 da6F4 = 4; */
        if (message.da6F4)
            da6F4.internalBinaryWrite(message.da6F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* da6F6 da6F6 = 6; */
        if (message.da6F6)
            da6F6.internalBinaryWrite(message.da6F6, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da5F73080600
 */
export const da5F73080600 = new da5F73080600$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da6F4$Type extends MessageType<da6F4> {
    constructor() {
        super("da6F4", [
            { no: 60572968, name: "n60572968", kind: "message", T: () => n60572968 }
        ]);
    }
    create(value?: PartialMessage<da6F4>): da6F4 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da6F4>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da6F4): da6F4 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* n60572968 n60572968 */ 60572968:
                    message.n60572968 = n60572968.internalBinaryRead(reader, reader.uint32(), options, message.n60572968);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da6F4, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* n60572968 n60572968 = 60572968; */
        if (message.n60572968)
            n60572968.internalBinaryWrite(message.n60572968, writer.tag(60572968, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da6F4
 */
export const da6F4 = new da6F4$Type();
// @generated message type with reflection information, may provide speed optimized methods
class da6F6$Type extends MessageType<da6F6> {
    constructor() {
        super("da6F6", [
            { no: 1, name: "f1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "f2", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<da6F6>): da6F6 {
        const message = { f1: 0, f2: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<da6F6>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: da6F6): da6F6 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 f1 */ 1:
                    message.f1 = reader.int32();
                    break;
                case /* int32 f2 */ 2:
                    message.f2 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: da6F6, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 f1 = 1; */
        if (message.f1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.f1);
        /* int32 f2 = 2; */
        if (message.f2 !== 0)
            writer.tag(2, WireType.Varint).int32(message.f2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message da6F6
 */
export const da6F6 = new da6F6$Type();
// @generated message type with reflection information, may provide speed optimized methods
class n60572968$Type extends MessageType<n60572968> {
    constructor() {
        super("n60572968", [
            { no: 1, name: "da7F1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "da7F4", kind: "message", T: () => da2F2 }
        ]);
    }
    create(value?: PartialMessage<n60572968>): n60572968 {
        const message = { da7F1: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<n60572968>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: n60572968): n60572968 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 da7F1 */ 1:
                    message.da7F1 = reader.int32();
                    break;
                case /* da2F2 da7F4 */ 4:
                    message.da7F4 = da2F2.internalBinaryRead(reader, reader.uint32(), options, message.da7F4);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: n60572968, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 da7F1 = 1; */
        if (message.da7F1 !== 0)
            writer.tag(1, WireType.Varint).int32(message.da7F1);
        /* da2F2 da7F4 = 4; */
        if (message.da7F4)
            da2F2.internalBinaryWrite(message.da7F4, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message n60572968
 */
export const n60572968 = new n60572968$Type();
